/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PageTiming model module.
 * @module BrowserUpMitmProxyClient/model/PageTiming
 * @version 1.0.0
 */
class PageTiming {
    /**
     * Constructs a new <code>PageTiming</code>.
     * @alias module:BrowserUpMitmProxyClient/model/PageTiming
     * @param name {String} Name of Custom Counter value you are adding to the page under counters
     * @param onContentLoad {Number} onContentLoad per the browser
     * @param firstPaint {Number} firstPaint from the browser
     * @param dns {Number} dns lookup time from the browser
     * @param ssl {Number} Ssl connect time from the browser
     * @param firstContentfulPaint {Number} firstContentfulPaint from the browser
     * @param cumulativeLayoutShift {Number} cumulativeLayoutShift metric from the browser
     * @param ttfb {Number} Time to first byte of the page's first request per the browser
     * @param value {Number} Value for the counter
     * @param firstInputDelay {Number} firstInputDelay from the browser
     * @param largestContentFullPaint {Number} largestContentFullPaint from the browser
     * @param onLoad {Number} onLoad per the browser
     * @param domInteractive {Number} domInteractive from the browser
     * @param href {String} Top level href, including hashtag, etc per the browser
     */
    constructor(name, onContentLoad, firstPaint, dns, ssl, firstContentfulPaint, cumulativeLayoutShift, ttfb, value, firstInputDelay, largestContentFullPaint, onLoad, domInteractive, href) { 
        
        PageTiming.initialize(this, name, onContentLoad, firstPaint, dns, ssl, firstContentfulPaint, cumulativeLayoutShift, ttfb, value, firstInputDelay, largestContentFullPaint, onLoad, domInteractive, href);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, onContentLoad, firstPaint, dns, ssl, firstContentfulPaint, cumulativeLayoutShift, ttfb, value, firstInputDelay, largestContentFullPaint, onLoad, domInteractive, href) { 
        obj['name'] = name;
        obj['onContentLoad'] = onContentLoad;
        obj['_firstPaint'] = firstPaint;
        obj['_dns'] = dns;
        obj['_ssl'] = ssl;
        obj['_firstContentfulPaint'] = firstContentfulPaint;
        obj['_cumulativeLayoutShift'] = cumulativeLayoutShift;
        obj['_ttfb'] = ttfb;
        obj['value'] = value;
        obj['_firstInputDelay'] = firstInputDelay;
        obj['_largestContentFullPaint'] = largestContentFullPaint;
        obj['onLoad'] = onLoad;
        obj['_domInteractive'] = domInteractive;
        obj['_href'] = href;
    }

    /**
     * Constructs a <code>PageTiming</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/PageTiming} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/PageTiming} The populated <code>PageTiming</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PageTiming();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('onContentLoad')) {
                obj['onContentLoad'] = ApiClient.convertToType(data['onContentLoad'], 'Number');
            }
            if (data.hasOwnProperty('_firstPaint')) {
                obj['_firstPaint'] = ApiClient.convertToType(data['_firstPaint'], 'Number');
            }
            if (data.hasOwnProperty('_dns')) {
                obj['_dns'] = ApiClient.convertToType(data['_dns'], 'Number');
            }
            if (data.hasOwnProperty('_ssl')) {
                obj['_ssl'] = ApiClient.convertToType(data['_ssl'], 'Number');
            }
            if (data.hasOwnProperty('_firstContentfulPaint')) {
                obj['_firstContentfulPaint'] = ApiClient.convertToType(data['_firstContentfulPaint'], 'Number');
            }
            if (data.hasOwnProperty('_cumulativeLayoutShift')) {
                obj['_cumulativeLayoutShift'] = ApiClient.convertToType(data['_cumulativeLayoutShift'], 'Number');
            }
            if (data.hasOwnProperty('_ttfb')) {
                obj['_ttfb'] = ApiClient.convertToType(data['_ttfb'], 'Number');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
            if (data.hasOwnProperty('_firstInputDelay')) {
                obj['_firstInputDelay'] = ApiClient.convertToType(data['_firstInputDelay'], 'Number');
            }
            if (data.hasOwnProperty('_largestContentFullPaint')) {
                obj['_largestContentFullPaint'] = ApiClient.convertToType(data['_largestContentFullPaint'], 'Number');
            }
            if (data.hasOwnProperty('onLoad')) {
                obj['onLoad'] = ApiClient.convertToType(data['onLoad'], 'Number');
            }
            if (data.hasOwnProperty('_domInteractive')) {
                obj['_domInteractive'] = ApiClient.convertToType(data['_domInteractive'], 'Number');
            }
            if (data.hasOwnProperty('_href')) {
                obj['_href'] = ApiClient.convertToType(data['_href'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PageTiming</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PageTiming</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PageTiming.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['_href'] && !(typeof data['_href'] === 'string' || data['_href'] instanceof String)) {
            throw new Error("Expected the field `_href` to be a primitive type in the JSON string but got " + data['_href']);
        }

        return true;
    }


}

PageTiming.RequiredProperties = ["name", "onContentLoad", "_firstPaint", "_dns", "_ssl", "_firstContentfulPaint", "_cumulativeLayoutShift", "_ttfb", "value", "_firstInputDelay", "_largestContentFullPaint", "onLoad", "_domInteractive", "_href"];

/**
 * Name of Custom Counter value you are adding to the page under counters
 * @member {String} name
 */
PageTiming.prototype['name'] = undefined;

/**
 * onContentLoad per the browser
 * @member {Number} onContentLoad
 */
PageTiming.prototype['onContentLoad'] = undefined;

/**
 * firstPaint from the browser
 * @member {Number} _firstPaint
 */
PageTiming.prototype['_firstPaint'] = undefined;

/**
 * dns lookup time from the browser
 * @member {Number} _dns
 */
PageTiming.prototype['_dns'] = undefined;

/**
 * Ssl connect time from the browser
 * @member {Number} _ssl
 */
PageTiming.prototype['_ssl'] = undefined;

/**
 * firstContentfulPaint from the browser
 * @member {Number} _firstContentfulPaint
 */
PageTiming.prototype['_firstContentfulPaint'] = undefined;

/**
 * cumulativeLayoutShift metric from the browser
 * @member {Number} _cumulativeLayoutShift
 */
PageTiming.prototype['_cumulativeLayoutShift'] = undefined;

/**
 * Time to first byte of the page's first request per the browser
 * @member {Number} _ttfb
 */
PageTiming.prototype['_ttfb'] = undefined;

/**
 * Value for the counter
 * @member {Number} value
 */
PageTiming.prototype['value'] = undefined;

/**
 * firstInputDelay from the browser
 * @member {Number} _firstInputDelay
 */
PageTiming.prototype['_firstInputDelay'] = undefined;

/**
 * largestContentFullPaint from the browser
 * @member {Number} _largestContentFullPaint
 */
PageTiming.prototype['_largestContentFullPaint'] = undefined;

/**
 * onLoad per the browser
 * @member {Number} onLoad
 */
PageTiming.prototype['onLoad'] = undefined;

/**
 * domInteractive from the browser
 * @member {Number} _domInteractive
 */
PageTiming.prototype['_domInteractive'] = undefined;

/**
 * Top level href, including hashtag, etc per the browser
 * @member {String} _href
 */
PageTiming.prototype['_href'] = undefined;






export default PageTiming;

