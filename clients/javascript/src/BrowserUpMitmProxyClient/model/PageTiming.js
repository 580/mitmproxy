/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PageTiming model module.
 * @module BrowserUpMitmProxyClient/model/PageTiming
 * @version 1.0.0
 */
class PageTiming {
    /**
     * Constructs a new <code>PageTiming</code>.
     * @alias module:BrowserUpMitmProxyClient/model/PageTiming
     */
    constructor() { 
        
        PageTiming.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PageTiming</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/PageTiming} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/PageTiming} The populated <code>PageTiming</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PageTiming();

            if (data.hasOwnProperty('_cumulativeLayoutShift')) {
                obj['_cumulativeLayoutShift'] = ApiClient.convertToType(data['_cumulativeLayoutShift'], Object);
            }
            if (data.hasOwnProperty('_firstContentfulPaint')) {
                obj['_firstContentfulPaint'] = ApiClient.convertToType(data['_firstContentfulPaint'], Object);
            }
            if (data.hasOwnProperty('_largestContentfulPaint')) {
                obj['_largestContentfulPaint'] = ApiClient.convertToType(data['_largestContentfulPaint'], Object);
            }
            if (data.hasOwnProperty('_href')) {
                obj['_href'] = ApiClient.convertToType(data['_href'], Object);
            }
            if (data.hasOwnProperty('onLoad')) {
                obj['onLoad'] = ApiClient.convertToType(data['onLoad'], Object);
            }
            if (data.hasOwnProperty('_dns')) {
                obj['_dns'] = ApiClient.convertToType(data['_dns'], Object);
            }
            if (data.hasOwnProperty('_ttfb')) {
                obj['_ttfb'] = ApiClient.convertToType(data['_ttfb'], Object);
            }
            if (data.hasOwnProperty('_ssl')) {
                obj['_ssl'] = ApiClient.convertToType(data['_ssl'], Object);
            }
            if (data.hasOwnProperty('_firstPaint')) {
                obj['_firstPaint'] = ApiClient.convertToType(data['_firstPaint'], Object);
            }
            if (data.hasOwnProperty('onContentLoad')) {
                obj['onContentLoad'] = ApiClient.convertToType(data['onContentLoad'], Object);
            }
            if (data.hasOwnProperty('_domInteractive')) {
                obj['_domInteractive'] = ApiClient.convertToType(data['_domInteractive'], Object);
            }
            if (data.hasOwnProperty('_firstInputDelay')) {
                obj['_firstInputDelay'] = ApiClient.convertToType(data['_firstInputDelay'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PageTiming</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PageTiming</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * cumulativeLayoutShift metric from the browser
 * @member {Object} _cumulativeLayoutShift
 */
PageTiming.prototype['_cumulativeLayoutShift'] = undefined;

/**
 * firstContentfulPaint from the browser
 * @member {Object} _firstContentfulPaint
 */
PageTiming.prototype['_firstContentfulPaint'] = undefined;

/**
 * largestContentfulPaint from the browser
 * @member {Object} _largestContentfulPaint
 */
PageTiming.prototype['_largestContentfulPaint'] = undefined;

/**
 * Top level href, including hashtag, etc per the browser
 * @member {Object} _href
 */
PageTiming.prototype['_href'] = undefined;

/**
 * onLoad per the browser
 * @member {Object} onLoad
 */
PageTiming.prototype['onLoad'] = undefined;

/**
 * dns lookup time from the browser
 * @member {Object} _dns
 */
PageTiming.prototype['_dns'] = undefined;

/**
 * Time to first byte of the page's first request per the browser
 * @member {Object} _ttfb
 */
PageTiming.prototype['_ttfb'] = undefined;

/**
 * Ssl connect time from the browser
 * @member {Object} _ssl
 */
PageTiming.prototype['_ssl'] = undefined;

/**
 * firstPaint from the browser
 * @member {Object} _firstPaint
 */
PageTiming.prototype['_firstPaint'] = undefined;

/**
 * onContentLoad per the browser
 * @member {Object} onContentLoad
 */
PageTiming.prototype['onContentLoad'] = undefined;

/**
 * domInteractive from the browser
 * @member {Object} _domInteractive
 */
PageTiming.prototype['_domInteractive'] = undefined;

/**
 * firstInputDelay from the browser
 * @member {Object} _firstInputDelay
 */
PageTiming.prototype['_firstInputDelay'] = undefined;






export default PageTiming;

