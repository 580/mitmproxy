/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntryCache from './EntryCache';
import EntryRequest from './EntryRequest';
import EntryResponse from './EntryResponse';
import EntryTimings from './EntryTimings';
import WebSocketMessage from './WebSocketMessage';

/**
 * The Entry model module.
 * @module BrowserUpMitmProxyClient/model/Entry
 * @version 1.0.0
 */
class Entry {
    /**
     * Constructs a new <code>Entry</code>.
     * @alias module:BrowserUpMitmProxyClient/model/Entry
     * @param startedDateTime {Date} 
     * @param time {Number} 
     * @param request {module:BrowserUpMitmProxyClient/model/EntryRequest} 
     * @param response {module:BrowserUpMitmProxyClient/model/EntryResponse} 
     * @param cache {module:BrowserUpMitmProxyClient/model/EntryCache} 
     * @param timings {module:BrowserUpMitmProxyClient/model/EntryTimings} 
     */
    constructor(startedDateTime, time, request, response, cache, timings) { 
        
        Entry.initialize(this, startedDateTime, time, request, response, cache, timings);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, startedDateTime, time, request, response, cache, timings) { 
        obj['startedDateTime'] = startedDateTime;
        obj['time'] = time;
        obj['request'] = request;
        obj['response'] = response;
        obj['cache'] = cache;
        obj['timings'] = timings;
    }

    /**
     * Constructs a <code>Entry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/Entry} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/Entry} The populated <code>Entry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Entry();

            if (data.hasOwnProperty('pageref')) {
                obj['pageref'] = ApiClient.convertToType(data['pageref'], 'String');
            }
            if (data.hasOwnProperty('startedDateTime')) {
                obj['startedDateTime'] = ApiClient.convertToType(data['startedDateTime'], 'Date');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Number');
            }
            if (data.hasOwnProperty('request')) {
                obj['request'] = EntryRequest.constructFromObject(data['request']);
            }
            if (data.hasOwnProperty('response')) {
                obj['response'] = EntryResponse.constructFromObject(data['response']);
            }
            if (data.hasOwnProperty('cache')) {
                obj['cache'] = EntryCache.constructFromObject(data['cache']);
            }
            if (data.hasOwnProperty('timings')) {
                obj['timings'] = EntryTimings.constructFromObject(data['timings']);
            }
            if (data.hasOwnProperty('serverIPAddress')) {
                obj['serverIPAddress'] = ApiClient.convertToType(data['serverIPAddress'], 'String');
            }
            if (data.hasOwnProperty('_webSocketMessages')) {
                obj['_webSocketMessages'] = ApiClient.convertToType(data['_webSocketMessages'], [WebSocketMessage]);
            }
            if (data.hasOwnProperty('connection')) {
                obj['connection'] = ApiClient.convertToType(data['connection'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Entry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Entry</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Entry.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['pageref'] && !(typeof data['pageref'] === 'string' || data['pageref'] instanceof String)) {
            throw new Error("Expected the field `pageref` to be a primitive type in the JSON string but got " + data['pageref']);
        }
        // validate the optional field `request`
        if (data['request']) { // data not null
          EntryRequest.validateJSON(data['request']);
        }
        // validate the optional field `response`
        if (data['response']) { // data not null
          EntryResponse.validateJSON(data['response']);
        }
        // validate the optional field `cache`
        if (data['cache']) { // data not null
          EntryCache.validateJSON(data['cache']);
        }
        // validate the optional field `timings`
        if (data['timings']) { // data not null
          EntryTimings.validateJSON(data['timings']);
        }
        // ensure the json data is a string
        if (data['serverIPAddress'] && !(typeof data['serverIPAddress'] === 'string' || data['serverIPAddress'] instanceof String)) {
            throw new Error("Expected the field `serverIPAddress` to be a primitive type in the JSON string but got " + data['serverIPAddress']);
        }
        if (data['_webSocketMessages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['_webSocketMessages'])) {
                throw new Error("Expected the field `_webSocketMessages` to be an array in the JSON data but got " + data['_webSocketMessages']);
            }
            // validate the optional field `_webSocketMessages` (array)
            for (const item of data['_webSocketMessages']) {
                WebSocketMessage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['connection'] && !(typeof data['connection'] === 'string' || data['connection'] instanceof String)) {
            throw new Error("Expected the field `connection` to be a primitive type in the JSON string but got " + data['connection']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }

        return true;
    }


}

Entry.RequiredProperties = ["startedDateTime", "time", "request", "response", "cache", "timings"];

/**
 * @member {String} pageref
 */
Entry.prototype['pageref'] = undefined;

/**
 * @member {Date} startedDateTime
 */
Entry.prototype['startedDateTime'] = undefined;

/**
 * @member {Number} time
 */
Entry.prototype['time'] = undefined;

/**
 * @member {module:BrowserUpMitmProxyClient/model/EntryRequest} request
 */
Entry.prototype['request'] = undefined;

/**
 * @member {module:BrowserUpMitmProxyClient/model/EntryResponse} response
 */
Entry.prototype['response'] = undefined;

/**
 * @member {module:BrowserUpMitmProxyClient/model/EntryCache} cache
 */
Entry.prototype['cache'] = undefined;

/**
 * @member {module:BrowserUpMitmProxyClient/model/EntryTimings} timings
 */
Entry.prototype['timings'] = undefined;

/**
 * @member {String} serverIPAddress
 */
Entry.prototype['serverIPAddress'] = undefined;

/**
 * @member {Array.<module:BrowserUpMitmProxyClient/model/WebSocketMessage>} _webSocketMessages
 */
Entry.prototype['_webSocketMessages'] = undefined;

/**
 * @member {String} connection
 */
Entry.prototype['connection'] = undefined;

/**
 * @member {String} comment
 */
Entry.prototype['comment'] = undefined;






export default Entry;

