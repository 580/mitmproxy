/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EntryTimings model module.
 * @module BrowserUpMitmProxyClient/model/EntryTimings
 * @version 1.0.0
 */
class EntryTimings {
    /**
     * Constructs a new <code>EntryTimings</code>.
     * @alias module:BrowserUpMitmProxyClient/model/EntryTimings
     * @param dns {Number} 
     * @param connect {Number} 
     * @param blocked {Number} 
     * @param send {Number} 
     * @param wait {Number} 
     * @param receive {Number} 
     * @param ssl {Number} 
     */
    constructor(dns, connect, blocked, send, wait, receive, ssl) { 
        
        EntryTimings.initialize(this, dns, connect, blocked, send, wait, receive, ssl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dns, connect, blocked, send, wait, receive, ssl) { 
        obj['dns'] = dns || -1;
        obj['connect'] = connect || -1;
        obj['blocked'] = blocked || -1;
        obj['send'] = send || -1;
        obj['wait'] = wait || -1;
        obj['receive'] = receive || -1;
        obj['ssl'] = ssl || -1;
    }

    /**
     * Constructs a <code>EntryTimings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/EntryTimings} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/EntryTimings} The populated <code>EntryTimings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntryTimings();

            if (data.hasOwnProperty('dns')) {
                obj['dns'] = ApiClient.convertToType(data['dns'], 'Number');
            }
            if (data.hasOwnProperty('connect')) {
                obj['connect'] = ApiClient.convertToType(data['connect'], 'Number');
            }
            if (data.hasOwnProperty('blocked')) {
                obj['blocked'] = ApiClient.convertToType(data['blocked'], 'Number');
            }
            if (data.hasOwnProperty('send')) {
                obj['send'] = ApiClient.convertToType(data['send'], 'Number');
            }
            if (data.hasOwnProperty('wait')) {
                obj['wait'] = ApiClient.convertToType(data['wait'], 'Number');
            }
            if (data.hasOwnProperty('receive')) {
                obj['receive'] = ApiClient.convertToType(data['receive'], 'Number');
            }
            if (data.hasOwnProperty('ssl')) {
                obj['ssl'] = ApiClient.convertToType(data['ssl'], 'Number');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntryTimings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntryTimings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EntryTimings.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }

        return true;
    }


}

EntryTimings.RequiredProperties = ["dns", "connect", "blocked", "send", "wait", "receive", "ssl"];

/**
 * @member {Number} dns
 * @default -1
 */
EntryTimings.prototype['dns'] = -1;

/**
 * @member {Number} connect
 * @default -1
 */
EntryTimings.prototype['connect'] = -1;

/**
 * @member {Number} blocked
 * @default -1
 */
EntryTimings.prototype['blocked'] = -1;

/**
 * @member {Number} send
 * @default -1
 */
EntryTimings.prototype['send'] = -1;

/**
 * @member {Number} wait
 * @default -1
 */
EntryTimings.prototype['wait'] = -1;

/**
 * @member {Number} receive
 * @default -1
 */
EntryTimings.prototype['receive'] = -1;

/**
 * @member {Number} ssl
 * @default -1
 */
EntryTimings.prototype['ssl'] = -1;

/**
 * @member {String} comment
 */
EntryTimings.prototype['comment'] = undefined;






export default EntryTimings;

