/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HarEntryCache model module.
 * @module BrowserUpMitmProxyClient/model/HarEntryCache
 * @version 1.0.0
 */
class HarEntryCache {
    /**
     * Constructs a new <code>HarEntryCache</code>.
     * @alias module:BrowserUpMitmProxyClient/model/HarEntryCache
     */
    constructor() { 
        
        HarEntryCache.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HarEntryCache</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/HarEntryCache} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/HarEntryCache} The populated <code>HarEntryCache</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HarEntryCache();

            if (data.hasOwnProperty('beforeRequest')) {
                obj['beforeRequest'] = ApiClient.convertToType(data['beforeRequest'], Object);
            }
            if (data.hasOwnProperty('afterRequest')) {
                obj['afterRequest'] = ApiClient.convertToType(data['afterRequest'], Object);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HarEntryCache</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HarEntryCache</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {Object} beforeRequest
 */
HarEntryCache.prototype['beforeRequest'] = undefined;

/**
 * @member {Object} afterRequest
 */
HarEntryCache.prototype['afterRequest'] = undefined;

/**
 * @member {Object} comment
 */
HarEntryCache.prototype['comment'] = undefined;






export default HarEntryCache;

