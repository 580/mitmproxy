/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HarEntryRequestPostData from './HarEntryRequestPostData';

/**
 * The HarEntryRequest model module.
 * @module BrowserUpMitmProxyClient/model/HarEntryRequest
 * @version 1.0.0
 */
class HarEntryRequest {
    /**
     * Constructs a new <code>HarEntryRequest</code>.
     * @alias module:BrowserUpMitmProxyClient/model/HarEntryRequest
     * @param method {Object} 
     * @param url {Object} 
     * @param httpVersion {Object} 
     * @param cookies {Object} 
     * @param headers {Object} 
     * @param queryString {Object} 
     * @param headersSize {Object} 
     * @param bodySize {Object} 
     */
    constructor(method, url, httpVersion, cookies, headers, queryString, headersSize, bodySize) { 
        
        HarEntryRequest.initialize(this, method, url, httpVersion, cookies, headers, queryString, headersSize, bodySize);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, method, url, httpVersion, cookies, headers, queryString, headersSize, bodySize) { 
        obj['method'] = method;
        obj['url'] = url;
        obj['httpVersion'] = httpVersion;
        obj['cookies'] = cookies;
        obj['headers'] = headers;
        obj['queryString'] = queryString;
        obj['headersSize'] = headersSize;
        obj['bodySize'] = bodySize;
    }

    /**
     * Constructs a <code>HarEntryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/HarEntryRequest} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/HarEntryRequest} The populated <code>HarEntryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HarEntryRequest();

            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], Object);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], Object);
            }
            if (data.hasOwnProperty('httpVersion')) {
                obj['httpVersion'] = ApiClient.convertToType(data['httpVersion'], Object);
            }
            if (data.hasOwnProperty('cookies')) {
                obj['cookies'] = ApiClient.convertToType(data['cookies'], Object);
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], Object);
            }
            if (data.hasOwnProperty('queryString')) {
                obj['queryString'] = ApiClient.convertToType(data['queryString'], Object);
            }
            if (data.hasOwnProperty('postData')) {
                obj['postData'] = HarEntryRequestPostData.constructFromObject(data['postData']);
            }
            if (data.hasOwnProperty('headersSize')) {
                obj['headersSize'] = ApiClient.convertToType(data['headersSize'], Object);
            }
            if (data.hasOwnProperty('bodySize')) {
                obj['bodySize'] = ApiClient.convertToType(data['bodySize'], Object);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HarEntryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HarEntryRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HarEntryRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `postData`
        if (data['postData']) { // data not null
          HarEntryRequestPostData.validateJSON(data['postData']);
        }

        return true;
    }


}

HarEntryRequest.RequiredProperties = ["method", "url", "httpVersion", "cookies", "headers", "queryString", "headersSize", "bodySize"];

/**
 * @member {Object} method
 */
HarEntryRequest.prototype['method'] = undefined;

/**
 * @member {Object} url
 */
HarEntryRequest.prototype['url'] = undefined;

/**
 * @member {Object} httpVersion
 */
HarEntryRequest.prototype['httpVersion'] = undefined;

/**
 * @member {Object} cookies
 */
HarEntryRequest.prototype['cookies'] = undefined;

/**
 * @member {Object} headers
 */
HarEntryRequest.prototype['headers'] = undefined;

/**
 * @member {Object} queryString
 */
HarEntryRequest.prototype['queryString'] = undefined;

/**
 * @member {module:BrowserUpMitmProxyClient/model/HarEntryRequestPostData} postData
 */
HarEntryRequest.prototype['postData'] = undefined;

/**
 * @member {Object} headersSize
 */
HarEntryRequest.prototype['headersSize'] = undefined;

/**
 * @member {Object} bodySize
 */
HarEntryRequest.prototype['bodySize'] = undefined;

/**
 * @member {Object} comment
 */
HarEntryRequest.prototype['comment'] = undefined;






export default HarEntryRequest;

