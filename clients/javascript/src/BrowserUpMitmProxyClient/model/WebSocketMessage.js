/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WebSocketMessage model module.
 * @module BrowserUpMitmProxyClient/model/WebSocketMessage
 * @version 1.0.0
 */
class WebSocketMessage {
    /**
     * Constructs a new <code>WebSocketMessage</code>.
     * @alias module:BrowserUpMitmProxyClient/model/WebSocketMessage
     * @param type {String} 
     * @param opcode {Number} 
     * @param data {String} 
     * @param time {Number} 
     */
    constructor(type, opcode, data, time) { 
        
        WebSocketMessage.initialize(this, type, opcode, data, time);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, opcode, data, time) { 
        obj['type'] = type;
        obj['opcode'] = opcode;
        obj['data'] = data;
        obj['time'] = time;
    }

    /**
     * Constructs a <code>WebSocketMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/WebSocketMessage} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/WebSocketMessage} The populated <code>WebSocketMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebSocketMessage();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('opcode')) {
                obj['opcode'] = ApiClient.convertToType(data['opcode'], 'Number');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {String} type
 */
WebSocketMessage.prototype['type'] = undefined;

/**
 * @member {Number} opcode
 */
WebSocketMessage.prototype['opcode'] = undefined;

/**
 * @member {String} data
 */
WebSocketMessage.prototype['data'] = undefined;

/**
 * @member {Number} time
 */
WebSocketMessage.prototype['time'] = undefined;






export default WebSocketMessage;

