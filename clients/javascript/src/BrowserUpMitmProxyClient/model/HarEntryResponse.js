/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HarEntryResponseContent from './HarEntryResponseContent';

/**
 * The HarEntryResponse model module.
 * @module BrowserUpMitmProxyClient/model/HarEntryResponse
 * @version 1.0.0
 */
class HarEntryResponse {
    /**
     * Constructs a new <code>HarEntryResponse</code>.
     * @alias module:BrowserUpMitmProxyClient/model/HarEntryResponse
     * @param status {Object} 
     * @param statusText {Object} 
     * @param httpVersion {Object} 
     * @param cookies {Object} 
     * @param headers {Object} 
     * @param content {module:BrowserUpMitmProxyClient/model/HarEntryResponseContent} 
     * @param redirectURL {Object} 
     * @param headersSize {Object} 
     * @param bodySize {Object} 
     */
    constructor(status, statusText, httpVersion, cookies, headers, content, redirectURL, headersSize, bodySize) { 
        
        HarEntryResponse.initialize(this, status, statusText, httpVersion, cookies, headers, content, redirectURL, headersSize, bodySize);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, statusText, httpVersion, cookies, headers, content, redirectURL, headersSize, bodySize) { 
        obj['status'] = status;
        obj['statusText'] = statusText;
        obj['httpVersion'] = httpVersion;
        obj['cookies'] = cookies;
        obj['headers'] = headers;
        obj['content'] = content;
        obj['redirectURL'] = redirectURL;
        obj['headersSize'] = headersSize;
        obj['bodySize'] = bodySize;
    }

    /**
     * Constructs a <code>HarEntryResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/HarEntryResponse} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/HarEntryResponse} The populated <code>HarEntryResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HarEntryResponse();

            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], Object);
            }
            if (data.hasOwnProperty('statusText')) {
                obj['statusText'] = ApiClient.convertToType(data['statusText'], Object);
            }
            if (data.hasOwnProperty('httpVersion')) {
                obj['httpVersion'] = ApiClient.convertToType(data['httpVersion'], Object);
            }
            if (data.hasOwnProperty('cookies')) {
                obj['cookies'] = ApiClient.convertToType(data['cookies'], Object);
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], Object);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = HarEntryResponseContent.constructFromObject(data['content']);
            }
            if (data.hasOwnProperty('redirectURL')) {
                obj['redirectURL'] = ApiClient.convertToType(data['redirectURL'], Object);
            }
            if (data.hasOwnProperty('headersSize')) {
                obj['headersSize'] = ApiClient.convertToType(data['headersSize'], Object);
            }
            if (data.hasOwnProperty('bodySize')) {
                obj['bodySize'] = ApiClient.convertToType(data['bodySize'], Object);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HarEntryResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HarEntryResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HarEntryResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `content`
        if (data['content']) { // data not null
          HarEntryResponseContent.validateJSON(data['content']);
        }

        return true;
    }


}

HarEntryResponse.RequiredProperties = ["status", "statusText", "httpVersion", "cookies", "headers", "content", "redirectURL", "headersSize", "bodySize"];

/**
 * @member {Object} status
 */
HarEntryResponse.prototype['status'] = undefined;

/**
 * @member {Object} statusText
 */
HarEntryResponse.prototype['statusText'] = undefined;

/**
 * @member {Object} httpVersion
 */
HarEntryResponse.prototype['httpVersion'] = undefined;

/**
 * @member {Object} cookies
 */
HarEntryResponse.prototype['cookies'] = undefined;

/**
 * @member {Object} headers
 */
HarEntryResponse.prototype['headers'] = undefined;

/**
 * @member {module:BrowserUpMitmProxyClient/model/HarEntryResponseContent} content
 */
HarEntryResponse.prototype['content'] = undefined;

/**
 * @member {Object} redirectURL
 */
HarEntryResponse.prototype['redirectURL'] = undefined;

/**
 * @member {Object} headersSize
 */
HarEntryResponse.prototype['headersSize'] = undefined;

/**
 * @member {Object} bodySize
 */
HarEntryResponse.prototype['bodySize'] = undefined;

/**
 * @member {Object} comment
 */
HarEntryResponse.prototype['comment'] = undefined;






export default HarEntryResponse;

