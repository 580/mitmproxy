/**
 * BrowserUp Proxy
 * BrowserUp Proxy Control API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AllowList from '../model/AllowList';
import BlockList from '../model/BlockList';
import Har from '../model/Har';

/**
* Proxy service.
* @module BrowserUpProxyClient/browserup-proxy-client/ProxyApi
* @version 1.0.0
*/
export default class ProxyApi {

    /**
    * Constructs a new ProxyApi. 
    * @alias module:BrowserUpProxyClient/browserup-proxy-client/ProxyApi
    * @class
    * @param {module:BrowserUpProxyClient/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:BrowserUpProxyClient/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allowlistDelete operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/ProxyApi~allowlistDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the AllowList, which will turn-off allowlist based filtering
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/ProxyApi~allowlistDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    allowlistDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/allowlist', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allowlistGet operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/ProxyApi~allowlistGetCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpProxyClient/model/AllowList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an AllowList
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/ProxyApi~allowlistGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpProxyClient/model/AllowList}
     */
    allowlistGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AllowList;
      return this.apiClient.callApi(
        '/allowlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allowlistPost operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/ProxyApi~allowlistPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets an AllowList
     * @param {Object} opts Optional parameters
     * @param {module:BrowserUpProxyClient/model/AllowList} opts.allowList 
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/ProxyApi~allowlistPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    allowlistPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['allowList'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/allowlist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blocklistGet operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/ProxyApi~blocklistGetCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpProxyClient/model/BlockList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a blocklist
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/ProxyApi~blocklistGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpProxyClient/model/BlockList}
     */
    blocklistGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlockList;
      return this.apiClient.callApi(
        '/blocklist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blocklistPost operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/ProxyApi~blocklistPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets an BlockList
     * @param {Object} opts Optional parameters
     * @param {module:BrowserUpProxyClient/model/BlockList} opts.blockList 
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/ProxyApi~blocklistPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    blocklistPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['blockList'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/blocklist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the harGet operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/ProxyApi~harGetCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpProxyClient/model/Har} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current HAR
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/ProxyApi~harGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpProxyClient/model/Har}
     */
    harGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Har;
      return this.apiClient.callApi(
        '/har', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
