/**
 * BrowserUp Proxy
 * ___ This is the REST API for controlling the BrowserUp Proxy.  The BrowserUp Proxy is a swiss army knife for automated testing. It allows traffic capture in HAR files and manipulation.  It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AllowList from '../model/AllowList';
import AuthBasic from '../model/AuthBasic';
import BlockList from '../model/BlockList';
import Har from '../model/Har';
import Headers from '../model/Headers';

/**
* BrowserUpProxy service.
* @module BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi
* @version 1.0.0
*/
export default class BrowserUpProxyApi {

    /**
    * Constructs a new BrowserUpProxyApi. 
    * @alias module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi
    * @class
    * @param {module:BrowserUpProxyClient/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:BrowserUpProxyClient/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clearAdditionalHeaders operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~clearAdditionalHeadersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear the additional Headers
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~clearAdditionalHeadersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clearAdditionalHeaders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/additional_headers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clearAllowList operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~clearAllowListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears the AllowList, which will turn-off allowlist based filtering
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~clearAllowListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clearAllowList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/allowlist', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clearBasicAuthSettings operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~clearBasicAuthSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears Basic Auth for a domain, disabling Automatic Basic Auth for it.
     * @param {String} domain The domain for which to clear the basic auth settings
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~clearBasicAuthSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clearBasicAuthSettings(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling clearBasicAuthSettings");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth_basic/{domain}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdditionalHeaders operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~getAdditionalHeadersCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpProxyClient/model/Headers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current added Headers
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~getAdditionalHeadersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpProxyClient/model/Headers}
     */
    getAdditionalHeaders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Headers;
      return this.apiClient.callApi(
        '/additional_headers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllowList operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~getAllowListCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpProxyClient/model/AllowList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an AllowList
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~getAllowListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpProxyClient/model/AllowList}
     */
    getAllowList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AllowList;
      return this.apiClient.callApi(
        '/allowlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockList operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~getBlockListCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpProxyClient/model/BlockList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a blocklist
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~getBlockListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpProxyClient/model/BlockList}
     */
    getBlockList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlockList;
      return this.apiClient.callApi(
        '/blocklist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHarLog operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~getHarLogCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpProxyClient/model/Har} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current HAR.
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~getHarLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpProxyClient/model/Har}
     */
    getHarLog(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Har;
      return this.apiClient.callApi(
        '/har', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the healthcheckGet operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~healthcheckGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the healthcheck
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~healthcheckGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    healthcheckGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/healthcheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetHarLog operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~resetHarLogCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpProxyClient/model/Har} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a fresh HAR capture session.
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~resetHarLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpProxyClient/model/Har}
     */
    resetHarLog(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Har;
      return this.apiClient.callApi(
        '/har', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setAdditionalHeaders operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~setAdditionalHeadersCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpProxyClient/model/Headers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set additional headers to add to requests
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~setAdditionalHeadersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpProxyClient/model/Headers}
     */
    setAdditionalHeaders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Headers;
      return this.apiClient.callApi(
        '/additional_headers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setAllowList operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~setAllowListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets an AllowList
     * @param {Object} opts Optional parameters
     * @param {module:BrowserUpProxyClient/model/AllowList} opts.allowList 
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~setAllowListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setAllowList(opts, callback) {
      opts = opts || {};
      let postBody = opts['allowList'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/allowlist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setBasicAuth operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~setBasicAuthCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables automatic basic auth for a domain
     * @param {String} domain The domain for which this Basic Auth should be used
     * @param {Object} opts Optional parameters
     * @param {module:BrowserUpProxyClient/model/AuthBasic} opts.authBasic 
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~setBasicAuthCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setBasicAuth(domain, opts, callback) {
      opts = opts || {};
      let postBody = opts['authBasic'];
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling setBasicAuth");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth_basic/{domain}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setBlockList operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~setBlockListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets an BlockList
     * @param {Object} opts Optional parameters
     * @param {module:BrowserUpProxyClient/model/BlockList} opts.blockList 
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~setBlockListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setBlockList(opts, callback) {
      opts = opts || {};
      let postBody = opts['blockList'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/blocklist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setHarPage operation.
     * @callback module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~setHarPageCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpProxyClient/model/Har} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a fresh HAR Page in the current active HAR
     * @param {module:BrowserUpProxyClient/browserup-proxy-client/BrowserUpProxyApi~setHarPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpProxyClient/model/Har}
     */
    setHarPage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Har;
      return this.apiClient.callApi(
        '/har/page', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
