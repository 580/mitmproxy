/**
 * BrowserUp Proxy
 * ___ This is the REST API for controlling the BrowserUp Proxy.  The BrowserUp Proxy is a swiss army knife for automated testing. It allows traffic capture in HAR files and manipulation.  It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthBasic model module.
 * @module BrowserUpProxyClient/model/AuthBasic
 * @version 1.0.0
 */
class AuthBasic {
    /**
     * Constructs a new <code>AuthBasic</code>.
     * @alias module:BrowserUpProxyClient/model/AuthBasic
     * @param base64Credentials {String} base 64 encoding of the username and password
     */
    constructor(base64Credentials) { 
        
        AuthBasic.initialize(this, base64Credentials);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, base64Credentials) { 
        obj['base_64_credentials'] = base64Credentials;
    }

    /**
     * Constructs a <code>AuthBasic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpProxyClient/model/AuthBasic} obj Optional instance to populate.
     * @return {module:BrowserUpProxyClient/model/AuthBasic} The populated <code>AuthBasic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthBasic();

            if (data.hasOwnProperty('base_64_credentials')) {
                obj['base_64_credentials'] = ApiClient.convertToType(data['base_64_credentials'], 'String');
            }
        }
        return obj;
    }


}

/**
 * base 64 encoding of the username and password
 * @member {String} base_64_credentials
 */
AuthBasic.prototype['base_64_credentials'] = undefined;






export default AuthBasic;

