# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.0.0
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Action(BaseModel):
    """
    Action
    """
    name: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    class_name: Optional[StrictStr] = Field(None, alias="className")
    tag_name: Optional[StrictStr] = Field(None, alias="tagName")
    xpath: Optional[StrictStr] = None
    data_attributes: Optional[StrictStr] = Field(None, alias="dataAttributes")
    form_name: Optional[StrictStr] = Field(None, alias="formName")
    content: Optional[StrictStr] = None
    __properties = ["name", "id", "className", "tagName", "xpath", "dataAttributes", "formName", "content"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Action:
        """Create an instance of Action from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Action:
        """Create an instance of Action from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Action.parse_obj(obj)

        _obj = Action.parse_obj({
            "name": obj.get("name"),
            "id": obj.get("id"),
            "class_name": obj.get("className"),
            "tag_name": obj.get("tagName"),
            "xpath": obj.get("xpath"),
            "data_attributes": obj.get("dataAttributes"),
            "form_name": obj.get("formName"),
            "content": obj.get("content")
        })
        return _obj


