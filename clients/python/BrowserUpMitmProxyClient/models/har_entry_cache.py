# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.0.0
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from BrowserUpMitmProxyClient.models.har_entry_cache_before_request import HarEntryCacheBeforeRequest

class HarEntryCache(BaseModel):
    """
    HarEntryCache
    """
    before_request: Optional[HarEntryCacheBeforeRequest] = Field(None, alias="beforeRequest")
    after_request: Optional[HarEntryCacheBeforeRequest] = Field(None, alias="afterRequest")
    comment: Optional[StrictStr] = None
    __properties = ["beforeRequest", "afterRequest", "comment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HarEntryCache:
        """Create an instance of HarEntryCache from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of before_request
        if self.before_request:
            _dict['beforeRequest'] = self.before_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of after_request
        if self.after_request:
            _dict['afterRequest'] = self.after_request.to_dict()
        # set to None if before_request (nullable) is None
        # and __fields_set__ contains the field
        if self.before_request is None and "before_request" in self.__fields_set__:
            _dict['beforeRequest'] = None

        # set to None if after_request (nullable) is None
        # and __fields_set__ contains the field
        if self.after_request is None and "after_request" in self.__fields_set__:
            _dict['afterRequest'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HarEntryCache:
        """Create an instance of HarEntryCache from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HarEntryCache.parse_obj(obj)

        _obj = HarEntryCache.parse_obj({
            "before_request": HarEntryCacheBeforeRequest.from_dict(obj.get("beforeRequest")) if obj.get("beforeRequest") is not None else None,
            "after_request": HarEntryCacheBeforeRequest.from_dict(obj.get("afterRequest")) if obj.get("afterRequest") is not None else None,
            "comment": obj.get("comment")
        })
        return _obj


