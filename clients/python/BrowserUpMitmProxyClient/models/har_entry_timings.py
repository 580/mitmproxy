# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.0.0
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint

class HarEntryTimings(BaseModel):
    """
    HarEntryTimings
    """
    dns: conint(strict=True, ge=-1) = Field(...)
    connect: conint(strict=True, ge=-1) = Field(...)
    blocked: conint(strict=True, ge=-1) = Field(...)
    send: conint(strict=True, ge=-1) = Field(...)
    wait: conint(strict=True, ge=-1) = Field(...)
    receive: conint(strict=True, ge=-1) = Field(...)
    ssl: conint(strict=True, ge=-1) = Field(...)
    comment: Optional[StrictStr] = None
    __properties = ["dns", "connect", "blocked", "send", "wait", "receive", "ssl", "comment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HarEntryTimings:
        """Create an instance of HarEntryTimings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HarEntryTimings:
        """Create an instance of HarEntryTimings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HarEntryTimings.parse_obj(obj)

        _obj = HarEntryTimings.parse_obj({
            "dns": obj.get("dns") if obj.get("dns") is not None else -1,
            "connect": obj.get("connect") if obj.get("connect") is not None else -1,
            "blocked": obj.get("blocked") if obj.get("blocked") is not None else -1,
            "send": obj.get("send") if obj.get("send") is not None else -1,
            "wait": obj.get("wait") if obj.get("wait") is not None else -1,
            "receive": obj.get("receive") if obj.get("receive") is not None else -1,
            "ssl": obj.get("ssl") if obj.get("ssl") is not None else -1,
            "comment": obj.get("comment")
        })
        return _obj


