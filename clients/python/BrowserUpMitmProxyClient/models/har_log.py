# coding: utf-8

"""
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___

The version of the OpenAPI document: 1.0.0
Contact: developers@browserup.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel
from pydantic import conlist
from pydantic import Field
from pydantic import StrictStr

from BrowserUpMitmProxyClient.models.har_entry import HarEntry
from BrowserUpMitmProxyClient.models.har_log_creator import HarLogCreator
from BrowserUpMitmProxyClient.models.page import Page


class HarLog(BaseModel):
    """
    HarLog
    """

    version: StrictStr = Field(...)
    creator: HarLogCreator = Field(...)
    browser: Optional[HarLogCreator] = None
    pages: conlist(Page) = Field(...)
    entries: conlist(HarEntry) = Field(...)
    comment: Optional[StrictStr] = None
    __properties = ["version", "creator", "browser", "pages", "entries", "comment"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HarLog:
        """Create an instance of HarLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict["creator"] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of browser
        if self.browser:
            _dict["browser"] = self.browser.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pages (list)
        _items = []
        if self.pages:
            for _item in self.pages:
                if _item:
                    _items.append(_item.to_dict())
            _dict["pages"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in entries (list)
        _items = []
        if self.entries:
            for _item in self.entries:
                if _item:
                    _items.append(_item.to_dict())
            _dict["entries"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HarLog:
        """Create an instance of HarLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HarLog.parse_obj(obj)

        _obj = HarLog.parse_obj(
            {
                "version": obj.get("version"),
                "creator": HarLogCreator.from_dict(obj.get("creator"))
                if obj.get("creator") is not None
                else None,
                "browser": HarLogCreator.from_dict(obj.get("browser"))
                if obj.get("browser") is not None
                else None,
                "pages": [Page.from_dict(_item) for _item in obj.get("pages")]
                if obj.get("pages") is not None
                else None,
                "entries": [HarEntry.from_dict(_item) for _item in obj.get("entries")]
                if obj.get("entries") is not None
                else None,
                "comment": obj.get("comment"),
            }
        )
        return _obj
