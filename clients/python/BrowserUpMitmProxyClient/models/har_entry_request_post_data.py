# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.0.0
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from BrowserUpMitmProxyClient.models.har_entry_request_post_data_params_inner import HarEntryRequestPostDataParamsInner

class HarEntryRequestPostData(BaseModel):
    """
    Posted data info.
    """
    mime_type: StrictStr = Field(..., alias="mimeType")
    text: Optional[StrictStr] = None
    params: Optional[conlist(HarEntryRequestPostDataParamsInner)] = None
    __properties = ["mimeType", "text", "params"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HarEntryRequestPostData:
        """Create an instance of HarEntryRequestPostData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in params (list)
        _items = []
        if self.params:
            for _item in self.params:
                if _item:
                    _items.append(_item.to_dict())
            _dict['params'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HarEntryRequestPostData:
        """Create an instance of HarEntryRequestPostData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HarEntryRequestPostData.parse_obj(obj)

        _obj = HarEntryRequestPostData.parse_obj({
            "mime_type": obj.get("mimeType"),
            "text": obj.get("text"),
            "params": [HarEntryRequestPostDataParamsInner.from_dict(_item) for _item in obj.get("params")] if obj.get("params") is not None else None
        })
        return _obj


