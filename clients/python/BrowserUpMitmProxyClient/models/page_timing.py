# coding: utf-8

"""
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___

The version of the OpenAPI document: 1.0.0
Contact: developers@browserup.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional
from typing import Union

from pydantic import BaseModel
from pydantic import Field
from pydantic import StrictFloat
from pydantic import StrictInt
from pydantic import StrictStr


class PageTiming(BaseModel):
    """
    PageTiming
    """

    on_content_load: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="onContentLoad", description="onContentLoad per the browser"
    )
    on_load: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="onLoad", description="onLoad per the browser"
    )
    first_input_delay: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="_firstInputDelay", description="firstInputDelay from the browser"
    )
    first_paint: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="_firstPaint", description="firstPaint from the browser"
    )
    cumulative_layout_shift: Optional[Union[StrictFloat, StrictInt]] = Field(
        None,
        alias="_cumulativeLayoutShift",
        description="cumulativeLayoutShift metric from the browser",
    )
    largest_contentful_paint: Optional[Union[StrictFloat, StrictInt]] = Field(
        None,
        alias="_largestContentfulPaint",
        description="largestContentfulPaint from the browser",
    )
    dom_interactive: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="_domInteractive", description="domInteractive from the browser"
    )
    first_contentful_paint: Optional[Union[StrictFloat, StrictInt]] = Field(
        None,
        alias="_firstContentfulPaint",
        description="firstContentfulPaint from the browser",
    )
    dns: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="_dns", description="dns lookup time from the browser"
    )
    ssl: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="_ssl", description="Ssl connect time from the browser"
    )
    time_to_first_byte: Optional[Union[StrictFloat, StrictInt]] = Field(
        None,
        alias="_timeToFirstByte",
        description="Time to first byte of the page's first request per the browser",
    )
    href: Optional[StrictStr] = Field(
        None,
        alias="_href",
        description="Top level href, including hashtag, etc per the browser",
    )
    __properties = [
        "onContentLoad",
        "onLoad",
        "_firstInputDelay",
        "_firstPaint",
        "_cumulativeLayoutShift",
        "_largestContentfulPaint",
        "_domInteractive",
        "_firstContentfulPaint",
        "_dns",
        "_ssl",
        "_timeToFirstByte",
        "_href",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PageTiming:
        """Create an instance of PageTiming from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PageTiming:
        """Create an instance of PageTiming from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PageTiming.parse_obj(obj)

        _obj = PageTiming.parse_obj(
            {
                "on_content_load": obj.get("onContentLoad"),
                "on_load": obj.get("onLoad"),
                "first_input_delay": obj.get("_firstInputDelay"),
                "first_paint": obj.get("_firstPaint"),
                "cumulative_layout_shift": obj.get("_cumulativeLayoutShift"),
                "largest_contentful_paint": obj.get("_largestContentfulPaint"),
                "dom_interactive": obj.get("_domInteractive"),
                "first_contentful_paint": obj.get("_firstContentfulPaint"),
                "dns": obj.get("_dns"),
                "ssl": obj.get("_ssl"),
                "time_to_first_byte": obj.get("_timeToFirstByte"),
                "href": obj.get("_href"),
            }
        )
        return _obj
