# coding: utf-8

"""
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___

The version of the OpenAPI document: 1.0.0
Contact: developers@browserup.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any
from typing import Optional

from pydantic import BaseModel
from pydantic import conint
from pydantic import Field
from pydantic import StrictStr


class LargestContentfulPaint(BaseModel):
    """
    LargestContentfulPaint
    """

    start_time: Optional[conint(strict=True, ge=-1)] = Field(-1, alias="startTime")
    size: Optional[conint(strict=True, ge=-1)] = -1
    dom_path: Optional[StrictStr] = Field("", alias="domPath")
    tag: Optional[StrictStr] = ""
    additional_properties: dict[str, Any] = {}
    __properties = ["startTime", "size", "domPath", "tag"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LargestContentfulPaint:
        """Create an instance of LargestContentfulPaint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True, exclude={"additional_properties"}, exclude_none=True
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LargestContentfulPaint:
        """Create an instance of LargestContentfulPaint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LargestContentfulPaint.parse_obj(obj)

        _obj = LargestContentfulPaint.parse_obj(
            {
                "start_time": obj.get("startTime")
                if obj.get("startTime") is not None
                else -1,
                "size": obj.get("size") if obj.get("size") is not None else -1,
                "dom_path": obj.get("domPath")
                if obj.get("domPath") is not None
                else "",
                "tag": obj.get("tag") if obj.get("tag") is not None else "",
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
