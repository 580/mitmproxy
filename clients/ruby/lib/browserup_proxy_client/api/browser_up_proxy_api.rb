=begin
#BrowserUp Proxy

#___ This is the REST API for controlling the BrowserUp Proxy.  The BrowserUp Proxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'cgi'

module BrowserupProxy
  class BrowserUpProxyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Clear the additional Headers
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clear_additional_headers(opts = {})
      clear_additional_headers_with_http_info(opts)
      nil
    end

    # Clear the additional Headers
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clear_additional_headers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.clear_additional_headers ...'
      end
      # resource path
      local_var_path = '/additional_headers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.clear_additional_headers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#clear_additional_headers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clears the AllowList, which will turn-off allowlist based filtering
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clear_allow_list(opts = {})
      clear_allow_list_with_http_info(opts)
      nil
    end

    # Clears the AllowList, which will turn-off allowlist based filtering
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clear_allow_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.clear_allow_list ...'
      end
      # resource path
      local_var_path = '/allowlist'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.clear_allow_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#clear_allow_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clears Basic Auth for a domain, disabling Automatic Basic Auth for it.
    # @param domain [String] The domain for which to clear the basic auth settings
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clear_basic_auth_settings(domain, opts = {})
      clear_basic_auth_settings_with_http_info(domain, opts)
      nil
    end

    # Clears Basic Auth for a domain, disabling Automatic Basic Auth for it.
    # @param domain [String] The domain for which to clear the basic auth settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clear_basic_auth_settings_with_http_info(domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.clear_basic_auth_settings ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling BrowserUpProxyApi.clear_basic_auth_settings"
      end
      # resource path
      local_var_path = '/auth_basic/{domain}'.sub('{' + 'domain' + '}', CGI.escape(domain.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.clear_basic_auth_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#clear_basic_auth_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the current added Headers
    # @param [Hash] opts the optional parameters
    # @return [Headers]
    def get_additional_headers(opts = {})
      data, _status_code, _headers = get_additional_headers_with_http_info(opts)
      data
    end

    # Get the current added Headers
    # @param [Hash] opts the optional parameters
    # @return [Array<(Headers, Integer, Hash)>] Headers data, response status code and response headers
    def get_additional_headers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.get_additional_headers ...'
      end
      # resource path
      local_var_path = '/additional_headers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Headers'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.get_additional_headers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#get_additional_headers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an AllowList
    # @param [Hash] opts the optional parameters
    # @return [AllowList]
    def get_allow_list(opts = {})
      data, _status_code, _headers = get_allow_list_with_http_info(opts)
      data
    end

    # Get an AllowList
    # @param [Hash] opts the optional parameters
    # @return [Array<(AllowList, Integer, Hash)>] AllowList data, response status code and response headers
    def get_allow_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.get_allow_list ...'
      end
      # resource path
      local_var_path = '/allowlist'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AllowList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.get_allow_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#get_allow_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a blocklist
    # @param [Hash] opts the optional parameters
    # @return [BlockList]
    def get_block_list(opts = {})
      data, _status_code, _headers = get_block_list_with_http_info(opts)
      data
    end

    # Get a blocklist
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlockList, Integer, Hash)>] BlockList data, response status code and response headers
    def get_block_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.get_block_list ...'
      end
      # resource path
      local_var_path = '/blocklist'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BlockList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.get_block_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#get_block_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the current HAR.
    # @param [Hash] opts the optional parameters
    # @return [Har]
    def get_har_log(opts = {})
      data, _status_code, _headers = get_har_log_with_http_info(opts)
      data
    end

    # Get the current HAR.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Har, Integer, Hash)>] Har data, response status code and response headers
    def get_har_log_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.get_har_log ...'
      end
      # resource path
      local_var_path = '/har'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Har'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.get_har_log",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#get_har_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the healthcheck
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def healthcheck_get(opts = {})
      healthcheck_get_with_http_info(opts)
      nil
    end

    # Get the healthcheck
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def healthcheck_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.healthcheck_get ...'
      end
      # resource path
      local_var_path = '/healthcheck'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.healthcheck_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#healthcheck_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Starts a fresh HAR capture session.
    # @param [Hash] opts the optional parameters
    # @return [Har]
    def reset_har_log(opts = {})
      data, _status_code, _headers = reset_har_log_with_http_info(opts)
      data
    end

    # Starts a fresh HAR capture session.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Har, Integer, Hash)>] Har data, response status code and response headers
    def reset_har_log_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.reset_har_log ...'
      end
      # resource path
      local_var_path = '/har'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Har'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.reset_har_log",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#reset_har_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set additional headers to add to requests
    # @param [Hash] opts the optional parameters
    # @return [Headers]
    def set_additional_headers(opts = {})
      data, _status_code, _headers = set_additional_headers_with_http_info(opts)
      data
    end

    # Set additional headers to add to requests
    # @param [Hash] opts the optional parameters
    # @return [Array<(Headers, Integer, Hash)>] Headers data, response status code and response headers
    def set_additional_headers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.set_additional_headers ...'
      end
      # resource path
      local_var_path = '/additional_headers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Headers'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.set_additional_headers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#set_additional_headers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets an AllowList
    # @param [Hash] opts the optional parameters
    # @option opts [AllowList] :allow_list 
    # @return [nil]
    def set_allow_list(opts = {})
      set_allow_list_with_http_info(opts)
      nil
    end

    # Sets an AllowList
    # @param [Hash] opts the optional parameters
    # @option opts [AllowList] :allow_list 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_allow_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.set_allow_list ...'
      end
      # resource path
      local_var_path = '/allowlist'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'allow_list'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.set_allow_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#set_allow_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enables automatic basic auth for a domain
    # @param domain [String] The domain for which this Basic Auth should be used
    # @param [Hash] opts the optional parameters
    # @option opts [AuthBasic] :auth_basic 
    # @return [nil]
    def set_basic_auth(domain, opts = {})
      set_basic_auth_with_http_info(domain, opts)
      nil
    end

    # Enables automatic basic auth for a domain
    # @param domain [String] The domain for which this Basic Auth should be used
    # @param [Hash] opts the optional parameters
    # @option opts [AuthBasic] :auth_basic 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_basic_auth_with_http_info(domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.set_basic_auth ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling BrowserUpProxyApi.set_basic_auth"
      end
      # resource path
      local_var_path = '/auth_basic/{domain}'.sub('{' + 'domain' + '}', CGI.escape(domain.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'auth_basic'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.set_basic_auth",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#set_basic_auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets an BlockList
    # @param [Hash] opts the optional parameters
    # @option opts [BlockList] :block_list 
    # @return [nil]
    def set_block_list(opts = {})
      set_block_list_with_http_info(opts)
      nil
    end

    # Sets an BlockList
    # @param [Hash] opts the optional parameters
    # @option opts [BlockList] :block_list 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_block_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.set_block_list ...'
      end
      # resource path
      local_var_path = '/blocklist'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'block_list'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.set_block_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#set_block_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Starts a fresh HAR Page in the current active HAR
    # @param [Hash] opts the optional parameters
    # @return [Har]
    def set_har_page(opts = {})
      data, _status_code, _headers = set_har_page_with_http_info(opts)
      data
    end

    # Starts a fresh HAR Page in the current active HAR
    # @param [Hash] opts the optional parameters
    # @return [Array<(Har, Integer, Hash)>] Har data, response status code and response headers
    def set_har_page_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrowserUpProxyApi.set_har_page ...'
      end
      # resource path
      local_var_path = '/har/page'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Har'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BrowserUpProxyApi.set_har_page",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrowserUpProxyApi#set_har_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
