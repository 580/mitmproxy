=begin
#BrowserUp Proxy

#BrowserUp Proxy Control API

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'cgi'

module BrowserupProxyClient
  class ProxyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes the AllowList, which will turn-off allowlist based filtering
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def allowlist_delete(opts = {})
      allowlist_delete_with_http_info(opts)
      nil
    end

    # Deletes the AllowList, which will turn-off allowlist based filtering
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def allowlist_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProxyApi.allowlist_delete ...'
      end
      # resource path
      local_var_path = '/allowlist'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProxyApi.allowlist_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProxyApi#allowlist_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an AllowList
    # @param [Hash] opts the optional parameters
    # @return [AllowList]
    def allowlist_get(opts = {})
      data, _status_code, _headers = allowlist_get_with_http_info(opts)
      data
    end

    # Get an AllowList
    # @param [Hash] opts the optional parameters
    # @return [Array<(AllowList, Integer, Hash)>] AllowList data, response status code and response headers
    def allowlist_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProxyApi.allowlist_get ...'
      end
      # resource path
      local_var_path = '/allowlist'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AllowList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProxyApi.allowlist_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProxyApi#allowlist_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets an AllowList
    # @param [Hash] opts the optional parameters
    # @option opts [AllowList] :allow_list 
    # @return [nil]
    def allowlist_post(opts = {})
      allowlist_post_with_http_info(opts)
      nil
    end

    # Sets an AllowList
    # @param [Hash] opts the optional parameters
    # @option opts [AllowList] :allow_list 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def allowlist_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProxyApi.allowlist_post ...'
      end
      # resource path
      local_var_path = '/allowlist'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'allow_list'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProxyApi.allowlist_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProxyApi#allowlist_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a blocklist
    # @param [Hash] opts the optional parameters
    # @return [BlockList]
    def blocklist_get(opts = {})
      data, _status_code, _headers = blocklist_get_with_http_info(opts)
      data
    end

    # Get a blocklist
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlockList, Integer, Hash)>] BlockList data, response status code and response headers
    def blocklist_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProxyApi.blocklist_get ...'
      end
      # resource path
      local_var_path = '/blocklist'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BlockList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProxyApi.blocklist_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProxyApi#blocklist_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets an BlockList
    # @param [Hash] opts the optional parameters
    # @option opts [BlockList] :block_list 
    # @return [nil]
    def blocklist_post(opts = {})
      blocklist_post_with_http_info(opts)
      nil
    end

    # Sets an BlockList
    # @param [Hash] opts the optional parameters
    # @option opts [BlockList] :block_list 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def blocklist_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProxyApi.blocklist_post ...'
      end
      # resource path
      local_var_path = '/blocklist'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'block_list'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProxyApi.blocklist_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProxyApi#blocklist_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
