/*
 * BrowserUp Proxy
 * ___ This is the REST API for controlling the BrowserUp Proxy.  The BrowserUp Proxy is a swiss army knife for automated testing. It allows traffic capture in HAR files and manipulation.  It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy.api;

import com.browserup.proxy_client.ApiException;
import com.browserup.proxy_client.AllowList;
import com.browserup.proxy_client.AuthBasic;
import com.browserup.proxy_client.BlockList;
import com.browserup.proxy_client.Har;
import com.browserup.proxy_client.Headers;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BrowserUpProxyApi
 */
@Ignore
public class BrowserUpProxyApiTest {

    private final BrowserUpProxyApi api = new BrowserUpProxyApi();

    
    /**
     * 
     *
     * Clear the additional Headers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearAdditionalHeadersTest() throws ApiException {
        api.clearAdditionalHeaders();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clears the AllowList, which will turn-off allowlist based filtering
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearAllowListTest() throws ApiException {
        api.clearAllowList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clears Basic Auth for a domain, disabling Automatic Basic Auth for it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearBasicAuthSettingsTest() throws ApiException {
        String domain = null;
        api.clearBasicAuthSettings(domain);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the current added Headers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAdditionalHeadersTest() throws ApiException {
        Headers response = api.getAdditionalHeaders();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get an AllowList
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowListTest() throws ApiException {
        AllowList response = api.getAllowList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a blocklist
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockListTest() throws ApiException {
        BlockList response = api.getBlockList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the current HAR.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHarLogTest() throws ApiException {
        Har response = api.getHarLog();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the healthcheck
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void healthcheckGetTest() throws ApiException {
        api.healthcheckGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Starts a fresh HAR capture session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetHarLogTest() throws ApiException {
        Har response = api.resetHarLog();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set additional headers to add to requests
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAdditionalHeadersTest() throws ApiException {
        Headers response = api.setAdditionalHeaders();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Sets an AllowList
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAllowListTest() throws ApiException {
        AllowList allowList = null;
        api.setAllowList(allowList);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Enables automatic basic auth for a domain
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBasicAuthTest() throws ApiException {
        String domain = null;
        AuthBasic authBasic = null;
        api.setBasicAuth(domain, authBasic);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Sets an BlockList
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBlockListTest() throws ApiException {
        BlockList blockList = null;
        api.setBlockList(blockList);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Starts a fresh HAR Page in the current active HAR
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setHarPageTest() throws ApiException {
        Har response = api.setHarPage();

        // TODO: test validations
    }
    
}
