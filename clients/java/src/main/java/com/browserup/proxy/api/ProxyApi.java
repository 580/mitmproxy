/*
 * BrowserUp Proxy
 * BrowserUp Proxy Control API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy.api;

import com.browserup.proxy_client.ApiCallback;
import com.browserup.proxy_client.ApiClient;
import com.browserup.proxy_client.ApiException;
import com.browserup.proxy_client.ApiResponse;
import com.browserup.proxy_client.Configuration;
import com.browserup.proxy_client.Pair;
import com.browserup.proxy_client.ProgressRequestBody;
import com.browserup.proxy_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.browserup.proxy_client.AllowList;
import com.browserup.proxy_client.BlockList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProxyApi {
    private ApiClient localVarApiClient;

    public ProxyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProxyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for allowlistDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The current allowlist, if any, was destroyed an all requests are enabled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allowlistDeleteCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/allowlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allowlistDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = allowlistDeleteCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes the AllowList, which will turn-off allowlist based filtering
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The current allowlist, if any, was destroyed an all requests are enabled. </td><td>  -  </td></tr>
     </table>
     */
    public void allowlistDelete() throws ApiException {
        allowlistDeleteWithHttpInfo();
    }

    /**
     * 
     * Deletes the AllowList, which will turn-off allowlist based filtering
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The current allowlist, if any, was destroyed an all requests are enabled. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> allowlistDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = allowlistDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the AllowList, which will turn-off allowlist based filtering
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The current allowlist, if any, was destroyed an all requests are enabled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allowlistDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = allowlistDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for allowlistGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current allowlist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allowlistGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/allowlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allowlistGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = allowlistGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get an AllowList
     * @return AllowList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current allowlist. </td><td>  -  </td></tr>
     </table>
     */
    public AllowList allowlistGet() throws ApiException {
        ApiResponse<AllowList> localVarResp = allowlistGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get an AllowList
     * @return ApiResponse&lt;AllowList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current allowlist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllowList> allowlistGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = allowlistGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AllowList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an AllowList
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current allowlist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allowlistGetAsync(final ApiCallback<AllowList> _callback) throws ApiException {

        okhttp3.Call localVarCall = allowlistGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AllowList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for allowlistPost
     * @param allowList  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allowlistPostCall(AllowList allowList, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = allowList;

        // create path and map variables
        String localVarPath = "/allowlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allowlistPostValidateBeforeCall(AllowList allowList, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = allowlistPostCall(allowList, _callback);
        return localVarCall;

    }

    /**
     * 
     * Sets an AllowList
     * @param allowList  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public void allowlistPost(AllowList allowList) throws ApiException {
        allowlistPostWithHttpInfo(allowList);
    }

    /**
     * 
     * Sets an AllowList
     * @param allowList  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> allowlistPostWithHttpInfo(AllowList allowList) throws ApiException {
        okhttp3.Call localVarCall = allowlistPostValidateBeforeCall(allowList, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets an AllowList
     * @param allowList  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call allowlistPostAsync(AllowList allowList, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = allowlistPostValidateBeforeCall(allowList, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for blocklistGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current blocklist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocklistGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blocklist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blocklistGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blocklistGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get a blocklist
     * @return BlockList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current blocklist. </td><td>  -  </td></tr>
     </table>
     */
    public BlockList blocklistGet() throws ApiException {
        ApiResponse<BlockList> localVarResp = blocklistGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get a blocklist
     * @return ApiResponse&lt;BlockList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current blocklist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockList> blocklistGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = blocklistGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BlockList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a blocklist
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current blocklist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocklistGetAsync(final ApiCallback<BlockList> _callback) throws ApiException {

        okhttp3.Call localVarCall = blocklistGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BlockList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blocklistPost
     * @param blockList  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocklistPostCall(BlockList blockList, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = blockList;

        // create path and map variables
        String localVarPath = "/blocklist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blocklistPostValidateBeforeCall(BlockList blockList, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = blocklistPostCall(blockList, _callback);
        return localVarCall;

    }

    /**
     * 
     * Sets an BlockList
     * @param blockList  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public void blocklistPost(BlockList blockList) throws ApiException {
        blocklistPostWithHttpInfo(blockList);
    }

    /**
     * 
     * Sets an BlockList
     * @param blockList  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> blocklistPostWithHttpInfo(BlockList blockList) throws ApiException {
        okhttp3.Call localVarCall = blocklistPostValidateBeforeCall(blockList, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets an BlockList
     * @param blockList  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blocklistPostAsync(BlockList blockList, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = blocklistPostValidateBeforeCall(blockList, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
