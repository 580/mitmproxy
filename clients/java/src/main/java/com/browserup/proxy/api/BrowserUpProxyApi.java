/*
 * BrowserUp Proxy
 * ___ This is the REST API for controlling the BrowserUp Proxy.  The BrowserUp Proxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy.api;

import com.browserup.proxy_client.ApiCallback;
import com.browserup.proxy_client.ApiClient;
import com.browserup.proxy_client.ApiException;
import com.browserup.proxy_client.ApiResponse;
import com.browserup.proxy_client.Configuration;
import com.browserup.proxy_client.Pair;
import com.browserup.proxy_client.ProgressRequestBody;
import com.browserup.proxy_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.browserup.proxy_client.Har;
import com.browserup.proxy_client.MatchCriteria;
import com.browserup.proxy_client.VerifyResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrowserUpProxyApi {
    private ApiClient localVarApiClient;

    public BrowserUpProxyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrowserUpProxyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addCustomHarFields
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom fields were added to the HAR. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCustomHarFieldsCall(Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/har/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomHarFieldsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addCustomHarFieldsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Add custom fields to the current HAR.
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom fields were added to the HAR. </td><td>  -  </td></tr>
     </table>
     */
    public void addCustomHarFields(Object body) throws ApiException {
        addCustomHarFieldsWithHttpInfo(body);
    }

    /**
     * 
     * Add custom fields to the current HAR.
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom fields were added to the HAR. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCustomHarFieldsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = addCustomHarFieldsValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add custom fields to the current HAR.
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom fields were added to the HAR. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCustomHarFieldsAsync(Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomHarFieldsValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHarLog
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHarLogCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/har";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHarLogValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getHarLogCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get the current HAR.
     * @return Har
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public Har getHarLog() throws ApiException {
        ApiResponse<Har> localVarResp = getHarLogWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get the current HAR.
     * @return ApiResponse&lt;Har&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Har> getHarLogWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getHarLogValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the current HAR.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHarLogAsync(final ApiCallback<Har> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHarLogValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthcheck
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK means all is well. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthcheckCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/healthcheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthcheckValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = healthcheckCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get the healthcheck
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK means all is well. </td><td>  -  </td></tr>
     </table>
     */
    public void healthcheck() throws ApiException {
        healthcheckWithHttpInfo();
    }

    /**
     * 
     * Get the healthcheck
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK means all is well. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> healthcheckWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = healthcheckValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get the healthcheck
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK means all is well. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthcheckAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthcheckValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetHarLog
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetHarLogCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/har";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetHarLogValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = resetHarLogCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Starts a fresh HAR capture session.
     * @return Har
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public Har resetHarLog() throws ApiException {
        ApiResponse<Har> localVarResp = resetHarLogWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Starts a fresh HAR capture session.
     * @return ApiResponse&lt;Har&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Har> resetHarLogWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = resetHarLogValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts a fresh HAR capture session.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetHarLogAsync(final ApiCallback<Har> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetHarLogValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setHarPage
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setHarPageCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/har/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setHarPageValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = setHarPageCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Starts a fresh HAR Page in the current active HAR
     * @return Har
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public Har setHarPage() throws ApiException {
        ApiResponse<Har> localVarResp = setHarPageWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Starts a fresh HAR Page in the current active HAR
     * @return ApiResponse&lt;Har&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Har> setHarPageWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = setHarPageValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts a fresh HAR Page in the current active HAR
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setHarPageAsync(final ApiCallback<Har> _callback) throws ApiException {

        okhttp3.Call localVarCall = setHarPageValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyNotPresent
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic had no matching items </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyNotPresentCall(MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = matchCriteria;

        // create path and map variables
        String localVarPath = "/verify/not_present";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyNotPresentValidateBeforeCall(MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'matchCriteria' is set
        if (matchCriteria == null) {
            throw new ApiException("Missing the required parameter 'matchCriteria' when calling verifyNotPresent(Async)");
        }
        

        okhttp3.Call localVarCall = verifyNotPresentCall(matchCriteria, _callback);
        return localVarCall;

    }

    /**
     * 
     * Verify no matching items are present in the captured traffic
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return VerifyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic had no matching items </td><td>  -  </td></tr>
     </table>
     */
    public VerifyResult verifyNotPresent(MatchCriteria matchCriteria) throws ApiException {
        ApiResponse<VerifyResult> localVarResp = verifyNotPresentWithHttpInfo(matchCriteria);
        return localVarResp.getData();
    }

    /**
     * 
     * Verify no matching items are present in the captured traffic
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return ApiResponse&lt;VerifyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic had no matching items </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyResult> verifyNotPresentWithHttpInfo(MatchCriteria matchCriteria) throws ApiException {
        okhttp3.Call localVarCall = verifyNotPresentValidateBeforeCall(matchCriteria, null);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verify no matching items are present in the captured traffic
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic had no matching items </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyNotPresentAsync(MatchCriteria matchCriteria, final ApiCallback<VerifyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyNotPresentValidateBeforeCall(matchCriteria, _callback);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyPresent
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPresentCall(MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = matchCriteria;

        // create path and map variables
        String localVarPath = "/verify/present";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyPresentValidateBeforeCall(MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'matchCriteria' is set
        if (matchCriteria == null) {
            throw new ApiException("Missing the required parameter 'matchCriteria' when calling verifyPresent(Async)");
        }
        

        okhttp3.Call localVarCall = verifyPresentCall(matchCriteria, _callback);
        return localVarCall;

    }

    /**
     * 
     * Verify at least one matching item is present in the captured traffic
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return VerifyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyResult verifyPresent(MatchCriteria matchCriteria) throws ApiException {
        ApiResponse<VerifyResult> localVarResp = verifyPresentWithHttpInfo(matchCriteria);
        return localVarResp.getData();
    }

    /**
     * 
     * Verify at least one matching item is present in the captured traffic
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return ApiResponse&lt;VerifyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyResult> verifyPresentWithHttpInfo(MatchCriteria matchCriteria) throws ApiException {
        okhttp3.Call localVarCall = verifyPresentValidateBeforeCall(matchCriteria, null);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verify at least one matching item is present in the captured traffic
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPresentAsync(MatchCriteria matchCriteria, final ApiCallback<VerifyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyPresentValidateBeforeCall(matchCriteria, _callback);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifySLA
     * @param time The time used for comparison (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySLACall(Integer time, MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = matchCriteria;

        // create path and map variables
        String localVarPath = "/verify/sla/{time}"
            .replaceAll("\\{" + "time" + "\\}", localVarApiClient.escapeString(time.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifySLAValidateBeforeCall(Integer time, MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling verifySLA(Async)");
        }
        
        // verify the required parameter 'matchCriteria' is set
        if (matchCriteria == null) {
            throw new ApiException("Missing the required parameter 'matchCriteria' when calling verifySLA(Async)");
        }
        

        okhttp3.Call localVarCall = verifySLACall(time, matchCriteria, _callback);
        return localVarCall;

    }

    /**
     * 
     * Verify each traffic item matching the criteria meets is below SLA time
     * @param time The time used for comparison (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return VerifyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyResult verifySLA(Integer time, MatchCriteria matchCriteria) throws ApiException {
        ApiResponse<VerifyResult> localVarResp = verifySLAWithHttpInfo(time, matchCriteria);
        return localVarResp.getData();
    }

    /**
     * 
     * Verify each traffic item matching the criteria meets is below SLA time
     * @param time The time used for comparison (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return ApiResponse&lt;VerifyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyResult> verifySLAWithHttpInfo(Integer time, MatchCriteria matchCriteria) throws ApiException {
        okhttp3.Call localVarCall = verifySLAValidateBeforeCall(time, matchCriteria, null);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verify each traffic item matching the criteria meets is below SLA time
     * @param time The time used for comparison (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySLAAsync(Integer time, MatchCriteria matchCriteria, final ApiCallback<VerifyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifySLAValidateBeforeCall(time, matchCriteria, _callback);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifySize
     * @param size The size used for comparison (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the size criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySizeCall(Integer size, MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = matchCriteria;

        // create path and map variables
        String localVarPath = "/verify/size/{size}"
            .replaceAll("\\{" + "size" + "\\}", localVarApiClient.escapeString(size.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifySizeValidateBeforeCall(Integer size, MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling verifySize(Async)");
        }
        
        // verify the required parameter 'matchCriteria' is set
        if (matchCriteria == null) {
            throw new ApiException("Missing the required parameter 'matchCriteria' when calling verifySize(Async)");
        }
        

        okhttp3.Call localVarCall = verifySizeCall(size, matchCriteria, _callback);
        return localVarCall;

    }

    /**
     * 
     * Verify matching items in the captured traffic meet the size criteria
     * @param size The size used for comparison (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return VerifyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the size criteria. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyResult verifySize(Integer size, MatchCriteria matchCriteria) throws ApiException {
        ApiResponse<VerifyResult> localVarResp = verifySizeWithHttpInfo(size, matchCriteria);
        return localVarResp.getData();
    }

    /**
     * 
     * Verify matching items in the captured traffic meet the size criteria
     * @param size The size used for comparison (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return ApiResponse&lt;VerifyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the size criteria. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyResult> verifySizeWithHttpInfo(Integer size, MatchCriteria matchCriteria) throws ApiException {
        okhttp3.Call localVarCall = verifySizeValidateBeforeCall(size, matchCriteria, null);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verify matching items in the captured traffic meet the size criteria
     * @param size The size used for comparison (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the size criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySizeAsync(Integer size, MatchCriteria matchCriteria, final ApiCallback<VerifyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifySizeValidateBeforeCall(size, matchCriteria, _callback);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
