/*
 * BrowserUp Proxy
 * ___ This is the REST API for controlling the BrowserUp Proxy.  The BrowserUp Proxy is a swiss army knife for automated testing. It allows traffic capture in HAR files and manipulation.  It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy.api;

import com.browserup.proxy_client.ApiCallback;
import com.browserup.proxy_client.ApiClient;
import com.browserup.proxy_client.ApiException;
import com.browserup.proxy_client.ApiResponse;
import com.browserup.proxy_client.Configuration;
import com.browserup.proxy_client.Pair;
import com.browserup.proxy_client.ProgressRequestBody;
import com.browserup.proxy_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.browserup.proxy_client.AllowList;
import com.browserup.proxy_client.AuthBasic;
import com.browserup.proxy_client.BlockList;
import com.browserup.proxy_client.Har;
import com.browserup.proxy_client.Headers;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrowserUpProxyApi {
    private ApiClient localVarApiClient;

    public BrowserUpProxyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrowserUpProxyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for clearAdditionalHeaders
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The current additional header settings were cleared. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearAdditionalHeadersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/additional_headers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearAdditionalHeadersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = clearAdditionalHeadersCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Clear the additional Headers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The current additional header settings were cleared. </td><td>  -  </td></tr>
     </table>
     */
    public void clearAdditionalHeaders() throws ApiException {
        clearAdditionalHeadersWithHttpInfo();
    }

    /**
     * 
     * Clear the additional Headers
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The current additional header settings were cleared. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clearAdditionalHeadersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = clearAdditionalHeadersValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Clear the additional Headers
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The current additional header settings were cleared. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearAdditionalHeadersAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearAdditionalHeadersValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearAllowList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The allowlist was cleared and allowlist-based filtering is OFF until a new list is posted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearAllowListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/allowlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearAllowListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = clearAllowListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Clears the AllowList, which will turn-off allowlist based filtering
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The allowlist was cleared and allowlist-based filtering is OFF until a new list is posted. </td><td>  -  </td></tr>
     </table>
     */
    public void clearAllowList() throws ApiException {
        clearAllowListWithHttpInfo();
    }

    /**
     * 
     * Clears the AllowList, which will turn-off allowlist based filtering
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The allowlist was cleared and allowlist-based filtering is OFF until a new list is posted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clearAllowListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = clearAllowListValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Clears the AllowList, which will turn-off allowlist based filtering
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The allowlist was cleared and allowlist-based filtering is OFF until a new list is posted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearAllowListAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearAllowListValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearBasicAuthSettings
     * @param domain The domain for which to clear the basic auth settings (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The current Basic Authorization setting is cleared and no longer used for requests to a domain. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearBasicAuthSettingsCall(String domain, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth_basic/{domain}"
            .replaceAll("\\{" + "domain" + "\\}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearBasicAuthSettingsValidateBeforeCall(String domain, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling clearBasicAuthSettings(Async)");
        }
        

        okhttp3.Call localVarCall = clearBasicAuthSettingsCall(domain, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clears Basic Auth for a domain, disabling Automatic Basic Auth for it.
     * @param domain The domain for which to clear the basic auth settings (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The current Basic Authorization setting is cleared and no longer used for requests to a domain. </td><td>  -  </td></tr>
     </table>
     */
    public void clearBasicAuthSettings(String domain) throws ApiException {
        clearBasicAuthSettingsWithHttpInfo(domain);
    }

    /**
     * 
     * Clears Basic Auth for a domain, disabling Automatic Basic Auth for it.
     * @param domain The domain for which to clear the basic auth settings (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The current Basic Authorization setting is cleared and no longer used for requests to a domain. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clearBasicAuthSettingsWithHttpInfo(String domain) throws ApiException {
        okhttp3.Call localVarCall = clearBasicAuthSettingsValidateBeforeCall(domain, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Clears Basic Auth for a domain, disabling Automatic Basic Auth for it.
     * @param domain The domain for which to clear the basic auth settings (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The current Basic Authorization setting is cleared and no longer used for requests to a domain. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearBasicAuthSettingsAsync(String domain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearBasicAuthSettingsValidateBeforeCall(domain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdditionalHeaders
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current header settings. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdditionalHeadersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/additional_headers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdditionalHeadersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAdditionalHeadersCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get the current added Headers
     * @return Headers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current header settings. </td><td>  -  </td></tr>
     </table>
     */
    public Headers getAdditionalHeaders() throws ApiException {
        ApiResponse<Headers> localVarResp = getAdditionalHeadersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get the current added Headers
     * @return ApiResponse&lt;Headers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current header settings. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Headers> getAdditionalHeadersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAdditionalHeadersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Headers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the current added Headers
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current header settings. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdditionalHeadersAsync(final ApiCallback<Headers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdditionalHeadersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Headers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllowList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current allowlist. Only allowed requests will pass through. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/allowlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllowListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get an AllowList
     * @return AllowList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current allowlist. Only allowed requests will pass through. </td><td>  -  </td></tr>
     </table>
     */
    public AllowList getAllowList() throws ApiException {
        ApiResponse<AllowList> localVarResp = getAllowListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get an AllowList
     * @return ApiResponse&lt;AllowList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current allowlist. Only allowed requests will pass through. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllowList> getAllowListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllowListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AllowList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an AllowList
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current allowlist. Only allowed requests will pass through. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllowListAsync(final ApiCallback<AllowList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AllowList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBlockList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current blocklist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blocklist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBlockListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getBlockListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get a blocklist
     * @return BlockList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current blocklist. </td><td>  -  </td></tr>
     </table>
     */
    public BlockList getBlockList() throws ApiException {
        ApiResponse<BlockList> localVarResp = getBlockListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get a blocklist
     * @return ApiResponse&lt;BlockList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current blocklist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlockList> getBlockListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getBlockListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BlockList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a blocklist
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current blocklist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockListAsync(final ApiCallback<BlockList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBlockListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BlockList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHarLog
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHarLogCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/har";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHarLogValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getHarLogCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get the current HAR.
     * @return Har
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public Har getHarLog() throws ApiException {
        ApiResponse<Har> localVarResp = getHarLogWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get the current HAR.
     * @return ApiResponse&lt;Har&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Har> getHarLogWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getHarLogValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the current HAR.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHarLogAsync(final ApiCallback<Har> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHarLogValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthcheckGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK means all is well. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthcheckGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/healthcheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthcheckGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = healthcheckGetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get the healthcheck
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK means all is well. </td><td>  -  </td></tr>
     </table>
     */
    public void healthcheckGet() throws ApiException {
        healthcheckGetWithHttpInfo();
    }

    /**
     * 
     * Get the healthcheck
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK means all is well. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> healthcheckGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = healthcheckGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get the healthcheck
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK means all is well. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthcheckGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthcheckGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetHarLog
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetHarLogCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/har";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetHarLogValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = resetHarLogCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Starts a fresh HAR capture session.
     * @return Har
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public Har resetHarLog() throws ApiException {
        ApiResponse<Har> localVarResp = resetHarLogWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Starts a fresh HAR capture session.
     * @return ApiResponse&lt;Har&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Har> resetHarLogWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = resetHarLogValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts a fresh HAR capture session.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetHarLogAsync(final ApiCallback<Har> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetHarLogValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setAdditionalHeaders
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show the current additional header settings. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setAdditionalHeadersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/additional_headers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAdditionalHeadersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = setAdditionalHeadersCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Set additional headers to add to requests
     * @return Headers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show the current additional header settings. </td><td>  -  </td></tr>
     </table>
     */
    public Headers setAdditionalHeaders() throws ApiException {
        ApiResponse<Headers> localVarResp = setAdditionalHeadersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Set additional headers to add to requests
     * @return ApiResponse&lt;Headers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show the current additional header settings. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Headers> setAdditionalHeadersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = setAdditionalHeadersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Headers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set additional headers to add to requests
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show the current additional header settings. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setAdditionalHeadersAsync(final ApiCallback<Headers> _callback) throws ApiException {

        okhttp3.Call localVarCall = setAdditionalHeadersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Headers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setAllowList
     * @param allowList  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setAllowListCall(AllowList allowList, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = allowList;

        // create path and map variables
        String localVarPath = "/allowlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAllowListValidateBeforeCall(AllowList allowList, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = setAllowListCall(allowList, _callback);
        return localVarCall;

    }

    /**
     * 
     * Sets an AllowList
     * @param allowList  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public void setAllowList(AllowList allowList) throws ApiException {
        setAllowListWithHttpInfo(allowList);
    }

    /**
     * 
     * Sets an AllowList
     * @param allowList  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setAllowListWithHttpInfo(AllowList allowList) throws ApiException {
        okhttp3.Call localVarCall = setAllowListValidateBeforeCall(allowList, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets an AllowList
     * @param allowList  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setAllowListAsync(AllowList allowList, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setAllowListValidateBeforeCall(allowList, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setBasicAuth
     * @param domain The domain for which this Basic Auth should be used (required)
     * @param authBasic  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setBasicAuthCall(String domain, AuthBasic authBasic, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = authBasic;

        // create path and map variables
        String localVarPath = "/auth_basic/{domain}"
            .replaceAll("\\{" + "domain" + "\\}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setBasicAuthValidateBeforeCall(String domain, AuthBasic authBasic, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling setBasicAuth(Async)");
        }
        

        okhttp3.Call localVarCall = setBasicAuthCall(domain, authBasic, _callback);
        return localVarCall;

    }

    /**
     * 
     * Enables automatic basic auth for a domain
     * @param domain The domain for which this Basic Auth should be used (required)
     * @param authBasic  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public void setBasicAuth(String domain, AuthBasic authBasic) throws ApiException {
        setBasicAuthWithHttpInfo(domain, authBasic);
    }

    /**
     * 
     * Enables automatic basic auth for a domain
     * @param domain The domain for which this Basic Auth should be used (required)
     * @param authBasic  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setBasicAuthWithHttpInfo(String domain, AuthBasic authBasic) throws ApiException {
        okhttp3.Call localVarCall = setBasicAuthValidateBeforeCall(domain, authBasic, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Enables automatic basic auth for a domain
     * @param domain The domain for which this Basic Auth should be used (required)
     * @param authBasic  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setBasicAuthAsync(String domain, AuthBasic authBasic, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setBasicAuthValidateBeforeCall(domain, authBasic, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setBlockList
     * @param blockList  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setBlockListCall(BlockList blockList, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = blockList;

        // create path and map variables
        String localVarPath = "/blocklist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setBlockListValidateBeforeCall(BlockList blockList, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = setBlockListCall(blockList, _callback);
        return localVarCall;

    }

    /**
     * 
     * Sets an BlockList
     * @param blockList  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public void setBlockList(BlockList blockList) throws ApiException {
        setBlockListWithHttpInfo(blockList);
    }

    /**
     * 
     * Sets an BlockList
     * @param blockList  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setBlockListWithHttpInfo(BlockList blockList) throws ApiException {
        okhttp3.Call localVarCall = setBlockListValidateBeforeCall(blockList, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets an BlockList
     * @param blockList  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setBlockListAsync(BlockList blockList, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setBlockListValidateBeforeCall(blockList, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setHarPage
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setHarPageCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/har/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setHarPageValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = setHarPageCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Starts a fresh HAR Page in the current active HAR
     * @return Har
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public Har setHarPage() throws ApiException {
        ApiResponse<Har> localVarResp = setHarPageWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Starts a fresh HAR Page in the current active HAR
     * @return ApiResponse&lt;Har&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Har> setHarPageWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = setHarPageValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts a fresh HAR Page in the current active HAR
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setHarPageAsync(final ApiCallback<Har> _callback) throws ApiException {

        okhttp3.Call localVarCall = setHarPageValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
