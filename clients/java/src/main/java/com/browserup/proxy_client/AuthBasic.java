/*
 * BrowserUp Proxy
 * ___ This is the REST API for controlling the BrowserUp Proxy.  The BrowserUp Proxy is a swiss army knife for automated testing. It allows traffic capture in HAR files and manipulation.  It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy_client;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * AuthBasic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AuthBasic {
  public static final String SERIALIZED_NAME_BASE64_CREDENTIALS = "base_64_credentials";
  @SerializedName(SERIALIZED_NAME_BASE64_CREDENTIALS)
  private String base64Credentials;


  public AuthBasic base64Credentials(String base64Credentials) {
    
    this.base64Credentials = base64Credentials;
    return this;
  }

   /**
   * base 64 encoding of the username and password
   * @return base64Credentials
  **/
  @ApiModelProperty(required = true, value = "base 64 encoding of the username and password")

  public String getBase64Credentials() {
    return base64Credentials;
  }


  public void setBase64Credentials(String base64Credentials) {
    this.base64Credentials = base64Credentials;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthBasic authBasic = (AuthBasic) o;
    return Objects.equals(this.base64Credentials, authBasic.base64Credentials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(base64Credentials);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthBasic {\n");
    sb.append("    base64Credentials: ").append(toIndentedString(base64Credentials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

