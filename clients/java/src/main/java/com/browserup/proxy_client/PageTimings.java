/*
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy_client;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.browserup.proxy_client.JSON;

/**
 * PageTimings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PageTimings {
  public static final String SERIALIZED_NAME_ON_CONTENT_LOAD = "onContentLoad";
  @SerializedName(SERIALIZED_NAME_ON_CONTENT_LOAD)
  private Object onContentLoad = -1;

  public static final String SERIALIZED_NAME_ON_LOAD = "onLoad";
  @SerializedName(SERIALIZED_NAME_ON_LOAD)
  private Object onLoad = -1;

  public static final String SERIALIZED_NAME_HREF = "_href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private Object href = ;

  public static final String SERIALIZED_NAME_DNS = "_dns";
  @SerializedName(SERIALIZED_NAME_DNS)
  private Object dns = -1;

  public static final String SERIALIZED_NAME_SSL = "_ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  private Object ssl = -1;

  public static final String SERIALIZED_NAME_TTFB = "_ttfb";
  @SerializedName(SERIALIZED_NAME_TTFB)
  private Object ttfb = -1;

  public static final String SERIALIZED_NAME_CUMULATIVE_LAYOUT_SHIFT = "_cumulativeLayoutShift";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_LAYOUT_SHIFT)
  private Object cumulativeLayoutShift = -1;

  public static final String SERIALIZED_NAME_LARGEST_CONTENTFUL_PAINT = "_largestContentfulPaint";
  @SerializedName(SERIALIZED_NAME_LARGEST_CONTENTFUL_PAINT)
  private Object largestContentfulPaint = -1;

  public static final String SERIALIZED_NAME_FIRST_PAINT = "_firstPaint";
  @SerializedName(SERIALIZED_NAME_FIRST_PAINT)
  private Object firstPaint = -1;

  public static final String SERIALIZED_NAME_FIRST_INPUT_DELAY = "_firstInputDelay";
  @SerializedName(SERIALIZED_NAME_FIRST_INPUT_DELAY)
  private Object firstInputDelay = -1;

  public static final String SERIALIZED_NAME_DOM_INTERACTIVE = "_domInteractive";
  @SerializedName(SERIALIZED_NAME_DOM_INTERACTIVE)
  private Object domInteractive = -1;

  public static final String SERIALIZED_NAME_FIRST_CONTENTFUL_PAINT = "_firstContentfulPaint";
  @SerializedName(SERIALIZED_NAME_FIRST_CONTENTFUL_PAINT)
  private Object firstContentfulPaint = -1;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private Object comment = null;

  public PageTimings() {
  }

  public PageTimings onContentLoad(Object onContentLoad) {
    
    this.onContentLoad = onContentLoad;
    return this;
  }

   /**
   * Get onContentLoad
   * minimum: -1
   * @return onContentLoad
  **/
  @javax.annotation.Nullable

  public Object getOnContentLoad() {
    return onContentLoad;
  }


  public void setOnContentLoad(Object onContentLoad) {
    this.onContentLoad = onContentLoad;
  }


  public PageTimings onLoad(Object onLoad) {
    
    this.onLoad = onLoad;
    return this;
  }

   /**
   * Get onLoad
   * minimum: -1
   * @return onLoad
  **/
  @javax.annotation.Nullable

  public Object getOnLoad() {
    return onLoad;
  }


  public void setOnLoad(Object onLoad) {
    this.onLoad = onLoad;
  }


  public PageTimings href(Object href) {
    
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @javax.annotation.Nullable

  public Object getHref() {
    return href;
  }


  public void setHref(Object href) {
    this.href = href;
  }


  public PageTimings dns(Object dns) {
    
    this.dns = dns;
    return this;
  }

   /**
   * Get dns
   * minimum: -1
   * @return dns
  **/
  @javax.annotation.Nullable

  public Object getDns() {
    return dns;
  }


  public void setDns(Object dns) {
    this.dns = dns;
  }


  public PageTimings ssl(Object ssl) {
    
    this.ssl = ssl;
    return this;
  }

   /**
   * Get ssl
   * minimum: -1
   * @return ssl
  **/
  @javax.annotation.Nullable

  public Object getSsl() {
    return ssl;
  }


  public void setSsl(Object ssl) {
    this.ssl = ssl;
  }


  public PageTimings ttfb(Object ttfb) {
    
    this.ttfb = ttfb;
    return this;
  }

   /**
   * Get ttfb
   * minimum: -1
   * @return ttfb
  **/
  @javax.annotation.Nullable

  public Object getTtfb() {
    return ttfb;
  }


  public void setTtfb(Object ttfb) {
    this.ttfb = ttfb;
  }


  public PageTimings cumulativeLayoutShift(Object cumulativeLayoutShift) {
    
    this.cumulativeLayoutShift = cumulativeLayoutShift;
    return this;
  }

   /**
   * Get cumulativeLayoutShift
   * minimum: -1
   * @return cumulativeLayoutShift
  **/
  @javax.annotation.Nullable

  public Object getCumulativeLayoutShift() {
    return cumulativeLayoutShift;
  }


  public void setCumulativeLayoutShift(Object cumulativeLayoutShift) {
    this.cumulativeLayoutShift = cumulativeLayoutShift;
  }


  public PageTimings largestContentfulPaint(Object largestContentfulPaint) {
    
    this.largestContentfulPaint = largestContentfulPaint;
    return this;
  }

   /**
   * Get largestContentfulPaint
   * minimum: -1
   * @return largestContentfulPaint
  **/
  @javax.annotation.Nullable

  public Object getLargestContentfulPaint() {
    return largestContentfulPaint;
  }


  public void setLargestContentfulPaint(Object largestContentfulPaint) {
    this.largestContentfulPaint = largestContentfulPaint;
  }


  public PageTimings firstPaint(Object firstPaint) {
    
    this.firstPaint = firstPaint;
    return this;
  }

   /**
   * Get firstPaint
   * minimum: -1
   * @return firstPaint
  **/
  @javax.annotation.Nullable

  public Object getFirstPaint() {
    return firstPaint;
  }


  public void setFirstPaint(Object firstPaint) {
    this.firstPaint = firstPaint;
  }


  public PageTimings firstInputDelay(Object firstInputDelay) {
    
    this.firstInputDelay = firstInputDelay;
    return this;
  }

   /**
   * Get firstInputDelay
   * minimum: -1
   * @return firstInputDelay
  **/
  @javax.annotation.Nullable

  public Object getFirstInputDelay() {
    return firstInputDelay;
  }


  public void setFirstInputDelay(Object firstInputDelay) {
    this.firstInputDelay = firstInputDelay;
  }


  public PageTimings domInteractive(Object domInteractive) {
    
    this.domInteractive = domInteractive;
    return this;
  }

   /**
   * Get domInteractive
   * minimum: -1
   * @return domInteractive
  **/
  @javax.annotation.Nullable

  public Object getDomInteractive() {
    return domInteractive;
  }


  public void setDomInteractive(Object domInteractive) {
    this.domInteractive = domInteractive;
  }


  public PageTimings firstContentfulPaint(Object firstContentfulPaint) {
    
    this.firstContentfulPaint = firstContentfulPaint;
    return this;
  }

   /**
   * Get firstContentfulPaint
   * minimum: -1
   * @return firstContentfulPaint
  **/
  @javax.annotation.Nullable

  public Object getFirstContentfulPaint() {
    return firstContentfulPaint;
  }


  public void setFirstContentfulPaint(Object firstContentfulPaint) {
    this.firstContentfulPaint = firstContentfulPaint;
  }


  public PageTimings comment(Object comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable

  public Object getComment() {
    return comment;
  }


  public void setComment(Object comment) {
    this.comment = comment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageTimings pageTimings = (PageTimings) o;
    return Objects.equals(this.onContentLoad, pageTimings.onContentLoad) &&
        Objects.equals(this.onLoad, pageTimings.onLoad) &&
        Objects.equals(this.href, pageTimings.href) &&
        Objects.equals(this.dns, pageTimings.dns) &&
        Objects.equals(this.ssl, pageTimings.ssl) &&
        Objects.equals(this.ttfb, pageTimings.ttfb) &&
        Objects.equals(this.cumulativeLayoutShift, pageTimings.cumulativeLayoutShift) &&
        Objects.equals(this.largestContentfulPaint, pageTimings.largestContentfulPaint) &&
        Objects.equals(this.firstPaint, pageTimings.firstPaint) &&
        Objects.equals(this.firstInputDelay, pageTimings.firstInputDelay) &&
        Objects.equals(this.domInteractive, pageTimings.domInteractive) &&
        Objects.equals(this.firstContentfulPaint, pageTimings.firstContentfulPaint) &&
        Objects.equals(this.comment, pageTimings.comment);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(onContentLoad, onLoad, href, dns, ssl, ttfb, cumulativeLayoutShift, largestContentfulPaint, firstPaint, firstInputDelay, domInteractive, firstContentfulPaint, comment);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageTimings {\n");
    sb.append("    onContentLoad: ").append(toIndentedString(onContentLoad)).append("\n");
    sb.append("    onLoad: ").append(toIndentedString(onLoad)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    dns: ").append(toIndentedString(dns)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    ttfb: ").append(toIndentedString(ttfb)).append("\n");
    sb.append("    cumulativeLayoutShift: ").append(toIndentedString(cumulativeLayoutShift)).append("\n");
    sb.append("    largestContentfulPaint: ").append(toIndentedString(largestContentfulPaint)).append("\n");
    sb.append("    firstPaint: ").append(toIndentedString(firstPaint)).append("\n");
    sb.append("    firstInputDelay: ").append(toIndentedString(firstInputDelay)).append("\n");
    sb.append("    domInteractive: ").append(toIndentedString(domInteractive)).append("\n");
    sb.append("    firstContentfulPaint: ").append(toIndentedString(firstContentfulPaint)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("onContentLoad");
    openapiFields.add("onLoad");
    openapiFields.add("_href");
    openapiFields.add("_dns");
    openapiFields.add("_ssl");
    openapiFields.add("_ttfb");
    openapiFields.add("_cumulativeLayoutShift");
    openapiFields.add("_largestContentfulPaint");
    openapiFields.add("_firstPaint");
    openapiFields.add("_firstInputDelay");
    openapiFields.add("_domInteractive");
    openapiFields.add("_firstContentfulPaint");
    openapiFields.add("comment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("onContentLoad");
    openapiRequiredFields.add("onLoad");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PageTimings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PageTimings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageTimings is not found in the empty JSON string", PageTimings.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PageTimings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PageTimings` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PageTimings.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageTimings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageTimings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageTimings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageTimings.class));

       return (TypeAdapter<T>) new TypeAdapter<PageTimings>() {
           @Override
           public void write(JsonWriter out, PageTimings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PageTimings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PageTimings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PageTimings
  * @throws IOException if the JSON string is invalid with respect to PageTimings
  */
  public static PageTimings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageTimings.class);
  }

 /**
  * Convert an instance of PageTimings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

