/*
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy_client;

import java.util.Objects;
import java.util.Arrays;
import com.browserup.proxy_client.HarEntryRequestPostData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.browserup.proxy_client.JSON;

/**
 * HarEntryRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class HarEntryRequest {
  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private Object method = null;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private Object url = null;

  public static final String SERIALIZED_NAME_HTTP_VERSION = "httpVersion";
  @SerializedName(SERIALIZED_NAME_HTTP_VERSION)
  private Object httpVersion = null;

  public static final String SERIALIZED_NAME_COOKIES = "cookies";
  @SerializedName(SERIALIZED_NAME_COOKIES)
  private Object cookies = null;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Object headers = null;

  public static final String SERIALIZED_NAME_QUERY_STRING = "queryString";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING)
  private Object queryString = null;

  public static final String SERIALIZED_NAME_POST_DATA = "postData";
  @SerializedName(SERIALIZED_NAME_POST_DATA)
  private HarEntryRequestPostData postData;

  public static final String SERIALIZED_NAME_HEADERS_SIZE = "headersSize";
  @SerializedName(SERIALIZED_NAME_HEADERS_SIZE)
  private Object headersSize = null;

  public static final String SERIALIZED_NAME_BODY_SIZE = "bodySize";
  @SerializedName(SERIALIZED_NAME_BODY_SIZE)
  private Object bodySize = null;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private Object comment = null;

  public HarEntryRequest() {
  }

  public HarEntryRequest method(Object method) {
    
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nullable

  public Object getMethod() {
    return method;
  }


  public void setMethod(Object method) {
    this.method = method;
  }


  public HarEntryRequest url(Object url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable

  public Object getUrl() {
    return url;
  }


  public void setUrl(Object url) {
    this.url = url;
  }


  public HarEntryRequest httpVersion(Object httpVersion) {
    
    this.httpVersion = httpVersion;
    return this;
  }

   /**
   * Get httpVersion
   * @return httpVersion
  **/
  @javax.annotation.Nullable

  public Object getHttpVersion() {
    return httpVersion;
  }


  public void setHttpVersion(Object httpVersion) {
    this.httpVersion = httpVersion;
  }


  public HarEntryRequest cookies(Object cookies) {
    
    this.cookies = cookies;
    return this;
  }

   /**
   * Get cookies
   * @return cookies
  **/
  @javax.annotation.Nullable

  public Object getCookies() {
    return cookies;
  }


  public void setCookies(Object cookies) {
    this.cookies = cookies;
  }


  public HarEntryRequest headers(Object headers) {
    
    this.headers = headers;
    return this;
  }

   /**
   * Get headers
   * @return headers
  **/
  @javax.annotation.Nullable

  public Object getHeaders() {
    return headers;
  }


  public void setHeaders(Object headers) {
    this.headers = headers;
  }


  public HarEntryRequest queryString(Object queryString) {
    
    this.queryString = queryString;
    return this;
  }

   /**
   * Get queryString
   * @return queryString
  **/
  @javax.annotation.Nullable

  public Object getQueryString() {
    return queryString;
  }


  public void setQueryString(Object queryString) {
    this.queryString = queryString;
  }


  public HarEntryRequest postData(HarEntryRequestPostData postData) {
    
    this.postData = postData;
    return this;
  }

   /**
   * Get postData
   * @return postData
  **/
  @javax.annotation.Nullable

  public HarEntryRequestPostData getPostData() {
    return postData;
  }


  public void setPostData(HarEntryRequestPostData postData) {
    this.postData = postData;
  }


  public HarEntryRequest headersSize(Object headersSize) {
    
    this.headersSize = headersSize;
    return this;
  }

   /**
   * Get headersSize
   * @return headersSize
  **/
  @javax.annotation.Nullable

  public Object getHeadersSize() {
    return headersSize;
  }


  public void setHeadersSize(Object headersSize) {
    this.headersSize = headersSize;
  }


  public HarEntryRequest bodySize(Object bodySize) {
    
    this.bodySize = bodySize;
    return this;
  }

   /**
   * Get bodySize
   * @return bodySize
  **/
  @javax.annotation.Nullable

  public Object getBodySize() {
    return bodySize;
  }


  public void setBodySize(Object bodySize) {
    this.bodySize = bodySize;
  }


  public HarEntryRequest comment(Object comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable

  public Object getComment() {
    return comment;
  }


  public void setComment(Object comment) {
    this.comment = comment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HarEntryRequest harEntryRequest = (HarEntryRequest) o;
    return Objects.equals(this.method, harEntryRequest.method) &&
        Objects.equals(this.url, harEntryRequest.url) &&
        Objects.equals(this.httpVersion, harEntryRequest.httpVersion) &&
        Objects.equals(this.cookies, harEntryRequest.cookies) &&
        Objects.equals(this.headers, harEntryRequest.headers) &&
        Objects.equals(this.queryString, harEntryRequest.queryString) &&
        Objects.equals(this.postData, harEntryRequest.postData) &&
        Objects.equals(this.headersSize, harEntryRequest.headersSize) &&
        Objects.equals(this.bodySize, harEntryRequest.bodySize) &&
        Objects.equals(this.comment, harEntryRequest.comment);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(method, url, httpVersion, cookies, headers, queryString, postData, headersSize, bodySize, comment);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HarEntryRequest {\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    httpVersion: ").append(toIndentedString(httpVersion)).append("\n");
    sb.append("    cookies: ").append(toIndentedString(cookies)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    queryString: ").append(toIndentedString(queryString)).append("\n");
    sb.append("    postData: ").append(toIndentedString(postData)).append("\n");
    sb.append("    headersSize: ").append(toIndentedString(headersSize)).append("\n");
    sb.append("    bodySize: ").append(toIndentedString(bodySize)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("method");
    openapiFields.add("url");
    openapiFields.add("httpVersion");
    openapiFields.add("cookies");
    openapiFields.add("headers");
    openapiFields.add("queryString");
    openapiFields.add("postData");
    openapiFields.add("headersSize");
    openapiFields.add("bodySize");
    openapiFields.add("comment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("httpVersion");
    openapiRequiredFields.add("cookies");
    openapiRequiredFields.add("headers");
    openapiRequiredFields.add("queryString");
    openapiRequiredFields.add("headersSize");
    openapiRequiredFields.add("bodySize");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HarEntryRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HarEntryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HarEntryRequest is not found in the empty JSON string", HarEntryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!HarEntryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HarEntryRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HarEntryRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `postData`
      if (jsonObj.get("postData") != null && !jsonObj.get("postData").isJsonNull()) {
        HarEntryRequestPostData.validateJsonObject(jsonObj.getAsJsonObject("postData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HarEntryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HarEntryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HarEntryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HarEntryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<HarEntryRequest>() {
           @Override
           public void write(JsonWriter out, HarEntryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HarEntryRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HarEntryRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HarEntryRequest
  * @throws IOException if the JSON string is invalid with respect to HarEntryRequest
  */
  public static HarEntryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HarEntryRequest.class);
  }

 /**
  * Convert an instance of HarEntryRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

