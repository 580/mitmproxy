/*
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy_client;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * EntryTimings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EntryTimings {
  public static final String SERIALIZED_NAME_DNS = "dns";
  @SerializedName(SERIALIZED_NAME_DNS)
  private Long dns = -1l;

  public static final String SERIALIZED_NAME_CONNECT = "connect";
  @SerializedName(SERIALIZED_NAME_CONNECT)
  private Long connect = -1l;

  public static final String SERIALIZED_NAME_BLOCKED = "blocked";
  @SerializedName(SERIALIZED_NAME_BLOCKED)
  private Long blocked = -1l;

  public static final String SERIALIZED_NAME_SEND = "send";
  @SerializedName(SERIALIZED_NAME_SEND)
  private Long send = -1l;

  public static final String SERIALIZED_NAME_WAIT = "wait";
  @SerializedName(SERIALIZED_NAME_WAIT)
  private Long wait = -1l;

  public static final String SERIALIZED_NAME_RECEIVE = "receive";
  @SerializedName(SERIALIZED_NAME_RECEIVE)
  private Long receive = -1l;

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  private Long ssl = -1l;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;


  public EntryTimings dns(Long dns) {
    
    this.dns = dns;
    return this;
  }

   /**
   * Get dns
   * minimum: -1
   * @return dns
  **/
  @ApiModelProperty(required = true, value = "")

  public Long getDns() {
    return dns;
  }


  public void setDns(Long dns) {
    this.dns = dns;
  }


  public EntryTimings connect(Long connect) {
    
    this.connect = connect;
    return this;
  }

   /**
   * Get connect
   * minimum: -1
   * @return connect
  **/
  @ApiModelProperty(required = true, value = "")

  public Long getConnect() {
    return connect;
  }


  public void setConnect(Long connect) {
    this.connect = connect;
  }


  public EntryTimings blocked(Long blocked) {
    
    this.blocked = blocked;
    return this;
  }

   /**
   * Get blocked
   * minimum: -1
   * @return blocked
  **/
  @ApiModelProperty(required = true, value = "")

  public Long getBlocked() {
    return blocked;
  }


  public void setBlocked(Long blocked) {
    this.blocked = blocked;
  }


  public EntryTimings send(Long send) {
    
    this.send = send;
    return this;
  }

   /**
   * Get send
   * minimum: -1
   * @return send
  **/
  @ApiModelProperty(required = true, value = "")

  public Long getSend() {
    return send;
  }


  public void setSend(Long send) {
    this.send = send;
  }


  public EntryTimings wait(Long wait) {
    
    this.wait = wait;
    return this;
  }

   /**
   * Get wait
   * minimum: -1
   * @return wait
  **/
  @ApiModelProperty(required = true, value = "")

  public Long getWait() {
    return wait;
  }


  public void setWait(Long wait) {
    this.wait = wait;
  }


  public EntryTimings receive(Long receive) {
    
    this.receive = receive;
    return this;
  }

   /**
   * Get receive
   * minimum: -1
   * @return receive
  **/
  @ApiModelProperty(required = true, value = "")

  public Long getReceive() {
    return receive;
  }


  public void setReceive(Long receive) {
    this.receive = receive;
  }


  public EntryTimings ssl(Long ssl) {
    
    this.ssl = ssl;
    return this;
  }

   /**
   * Get ssl
   * minimum: -1
   * @return ssl
  **/
  @ApiModelProperty(required = true, value = "")

  public Long getSsl() {
    return ssl;
  }


  public void setSsl(Long ssl) {
    this.ssl = ssl;
  }


  public EntryTimings comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntryTimings entryTimings = (EntryTimings) o;
    return Objects.equals(this.dns, entryTimings.dns) &&
        Objects.equals(this.connect, entryTimings.connect) &&
        Objects.equals(this.blocked, entryTimings.blocked) &&
        Objects.equals(this.send, entryTimings.send) &&
        Objects.equals(this.wait, entryTimings.wait) &&
        Objects.equals(this.receive, entryTimings.receive) &&
        Objects.equals(this.ssl, entryTimings.ssl) &&
        Objects.equals(this.comment, entryTimings.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dns, connect, blocked, send, wait, receive, ssl, comment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntryTimings {\n");
    sb.append("    dns: ").append(toIndentedString(dns)).append("\n");
    sb.append("    connect: ").append(toIndentedString(connect)).append("\n");
    sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
    sb.append("    send: ").append(toIndentedString(send)).append("\n");
    sb.append("    wait: ").append(toIndentedString(wait)).append("\n");
    sb.append("    receive: ").append(toIndentedString(receive)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

