/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BrowserUp.Mitmproxy.Client.Client.OpenAPIDateConverter;

namespace BrowserUp.Mitmproxy.Client.Model
{
    /// <summary>
    /// PageTiming
    /// </summary>
    [DataContract(Name = "PageTiming")]
    public partial class PageTiming : IEquatable<PageTiming>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageTiming" /> class.
        /// </summary>
        /// <param name="firstInputDelay">firstInputDelay from the browser.</param>
        /// <param name="domInteractive">domInteractive from the browser.</param>
        /// <param name="cumulativeLayoutShift">cumulativeLayoutShift metric from the browser.</param>
        /// <param name="dns">dns lookup time from the browser.</param>
        /// <param name="href">Top level href, including hashtag, etc per the browser.</param>
        /// <param name="firstPaint">firstPaint from the browser.</param>
        /// <param name="largestContentfulPaint">largestContentfulPaint from the browser.</param>
        /// <param name="timeToFirstByte">Time to first byte of the page&#39;s first request per the browser.</param>
        /// <param name="ssl">Ssl connect time from the browser.</param>
        /// <param name="firstContentfulPaint">firstContentfulPaint from the browser.</param>
        /// <param name="onLoad">onLoad per the browser.</param>
        /// <param name="onContentLoad">onContentLoad per the browser.</param>
        public PageTiming(decimal firstInputDelay = default(decimal), decimal domInteractive = default(decimal), decimal cumulativeLayoutShift = default(decimal), decimal dns = default(decimal), string href = default(string), decimal firstPaint = default(decimal), decimal largestContentfulPaint = default(decimal), decimal timeToFirstByte = default(decimal), decimal ssl = default(decimal), decimal firstContentfulPaint = default(decimal), decimal onLoad = default(decimal), decimal onContentLoad = default(decimal))
        {
            this.FirstInputDelay = firstInputDelay;
            this.DomInteractive = domInteractive;
            this.CumulativeLayoutShift = cumulativeLayoutShift;
            this.Dns = dns;
            this.Href = href;
            this.FirstPaint = firstPaint;
            this.LargestContentfulPaint = largestContentfulPaint;
            this.TimeToFirstByte = timeToFirstByte;
            this.Ssl = ssl;
            this.FirstContentfulPaint = firstContentfulPaint;
            this.OnLoad = onLoad;
            this.OnContentLoad = onContentLoad;
        }

        /// <summary>
        /// firstInputDelay from the browser
        /// </summary>
        /// <value>firstInputDelay from the browser</value>
        [DataMember(Name = "_firstInputDelay", EmitDefaultValue = false)]
        public decimal FirstInputDelay { get; set; }

        /// <summary>
        /// domInteractive from the browser
        /// </summary>
        /// <value>domInteractive from the browser</value>
        [DataMember(Name = "_domInteractive", EmitDefaultValue = false)]
        public decimal DomInteractive { get; set; }

        /// <summary>
        /// cumulativeLayoutShift metric from the browser
        /// </summary>
        /// <value>cumulativeLayoutShift metric from the browser</value>
        [DataMember(Name = "_cumulativeLayoutShift", EmitDefaultValue = false)]
        public decimal CumulativeLayoutShift { get; set; }

        /// <summary>
        /// dns lookup time from the browser
        /// </summary>
        /// <value>dns lookup time from the browser</value>
        [DataMember(Name = "_dns", EmitDefaultValue = false)]
        public decimal Dns { get; set; }

        /// <summary>
        /// Top level href, including hashtag, etc per the browser
        /// </summary>
        /// <value>Top level href, including hashtag, etc per the browser</value>
        [DataMember(Name = "_href", EmitDefaultValue = false)]
        public string Href { get; set; }

        /// <summary>
        /// firstPaint from the browser
        /// </summary>
        /// <value>firstPaint from the browser</value>
        [DataMember(Name = "_firstPaint", EmitDefaultValue = false)]
        public decimal FirstPaint { get; set; }

        /// <summary>
        /// largestContentfulPaint from the browser
        /// </summary>
        /// <value>largestContentfulPaint from the browser</value>
        [DataMember(Name = "_largestContentfulPaint", EmitDefaultValue = false)]
        public decimal LargestContentfulPaint { get; set; }

        /// <summary>
        /// Time to first byte of the page&#39;s first request per the browser
        /// </summary>
        /// <value>Time to first byte of the page&#39;s first request per the browser</value>
        [DataMember(Name = "_timeToFirstByte", EmitDefaultValue = false)]
        public decimal TimeToFirstByte { get; set; }

        /// <summary>
        /// Ssl connect time from the browser
        /// </summary>
        /// <value>Ssl connect time from the browser</value>
        [DataMember(Name = "_ssl", EmitDefaultValue = false)]
        public decimal Ssl { get; set; }

        /// <summary>
        /// firstContentfulPaint from the browser
        /// </summary>
        /// <value>firstContentfulPaint from the browser</value>
        [DataMember(Name = "_firstContentfulPaint", EmitDefaultValue = false)]
        public decimal FirstContentfulPaint { get; set; }

        /// <summary>
        /// onLoad per the browser
        /// </summary>
        /// <value>onLoad per the browser</value>
        [DataMember(Name = "onLoad", EmitDefaultValue = false)]
        public decimal OnLoad { get; set; }

        /// <summary>
        /// onContentLoad per the browser
        /// </summary>
        /// <value>onContentLoad per the browser</value>
        [DataMember(Name = "onContentLoad", EmitDefaultValue = false)]
        public decimal OnContentLoad { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PageTiming {\n");
            sb.Append("  FirstInputDelay: ").Append(FirstInputDelay).Append("\n");
            sb.Append("  DomInteractive: ").Append(DomInteractive).Append("\n");
            sb.Append("  CumulativeLayoutShift: ").Append(CumulativeLayoutShift).Append("\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  FirstPaint: ").Append(FirstPaint).Append("\n");
            sb.Append("  LargestContentfulPaint: ").Append(LargestContentfulPaint).Append("\n");
            sb.Append("  TimeToFirstByte: ").Append(TimeToFirstByte).Append("\n");
            sb.Append("  Ssl: ").Append(Ssl).Append("\n");
            sb.Append("  FirstContentfulPaint: ").Append(FirstContentfulPaint).Append("\n");
            sb.Append("  OnLoad: ").Append(OnLoad).Append("\n");
            sb.Append("  OnContentLoad: ").Append(OnContentLoad).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PageTiming);
        }

        /// <summary>
        /// Returns true if PageTiming instances are equal
        /// </summary>
        /// <param name="input">Instance of PageTiming to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PageTiming input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FirstInputDelay == input.FirstInputDelay ||
                    this.FirstInputDelay.Equals(input.FirstInputDelay)
                ) && 
                (
                    this.DomInteractive == input.DomInteractive ||
                    this.DomInteractive.Equals(input.DomInteractive)
                ) && 
                (
                    this.CumulativeLayoutShift == input.CumulativeLayoutShift ||
                    this.CumulativeLayoutShift.Equals(input.CumulativeLayoutShift)
                ) && 
                (
                    this.Dns == input.Dns ||
                    this.Dns.Equals(input.Dns)
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.FirstPaint == input.FirstPaint ||
                    this.FirstPaint.Equals(input.FirstPaint)
                ) && 
                (
                    this.LargestContentfulPaint == input.LargestContentfulPaint ||
                    this.LargestContentfulPaint.Equals(input.LargestContentfulPaint)
                ) && 
                (
                    this.TimeToFirstByte == input.TimeToFirstByte ||
                    this.TimeToFirstByte.Equals(input.TimeToFirstByte)
                ) && 
                (
                    this.Ssl == input.Ssl ||
                    this.Ssl.Equals(input.Ssl)
                ) && 
                (
                    this.FirstContentfulPaint == input.FirstContentfulPaint ||
                    this.FirstContentfulPaint.Equals(input.FirstContentfulPaint)
                ) && 
                (
                    this.OnLoad == input.OnLoad ||
                    this.OnLoad.Equals(input.OnLoad)
                ) && 
                (
                    this.OnContentLoad == input.OnContentLoad ||
                    this.OnContentLoad.Equals(input.OnContentLoad)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FirstInputDelay.GetHashCode();
                hashCode = (hashCode * 59) + this.DomInteractive.GetHashCode();
                hashCode = (hashCode * 59) + this.CumulativeLayoutShift.GetHashCode();
                hashCode = (hashCode * 59) + this.Dns.GetHashCode();
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FirstPaint.GetHashCode();
                hashCode = (hashCode * 59) + this.LargestContentfulPaint.GetHashCode();
                hashCode = (hashCode * 59) + this.TimeToFirstByte.GetHashCode();
                hashCode = (hashCode * 59) + this.Ssl.GetHashCode();
                hashCode = (hashCode * 59) + this.FirstContentfulPaint.GetHashCode();
                hashCode = (hashCode * 59) + this.OnLoad.GetHashCode();
                hashCode = (hashCode * 59) + this.OnContentLoad.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
