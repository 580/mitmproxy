/**
 * BrowserUp Proxy
 * ___ This is the REST API for controlling the BrowserUp Proxy.  The BrowserUp Proxy is a swiss army knife for automated testing. It allows traffic capture in HAR files and manipulation.  It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/BrowserUpProxyClient/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/BrowserUpProxyClient/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BrowserUpProxyClient);
  }
}(this, function(expect, BrowserUpProxyClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BrowserUpProxyClient.BrowserUpProxyApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BrowserUpProxyApi', function() {
    describe('clearAdditionalHeaders', function() {
      it('should call clearAdditionalHeaders successfully', function(done) {
        //uncomment below and update the code to test clearAdditionalHeaders
        //instance.clearAdditionalHeaders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clearAllowList', function() {
      it('should call clearAllowList successfully', function(done) {
        //uncomment below and update the code to test clearAllowList
        //instance.clearAllowList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clearBasicAuthSettings', function() {
      it('should call clearBasicAuthSettings successfully', function(done) {
        //uncomment below and update the code to test clearBasicAuthSettings
        //instance.clearBasicAuthSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAdditionalHeaders', function() {
      it('should call getAdditionalHeaders successfully', function(done) {
        //uncomment below and update the code to test getAdditionalHeaders
        //instance.getAdditionalHeaders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllowList', function() {
      it('should call getAllowList successfully', function(done) {
        //uncomment below and update the code to test getAllowList
        //instance.getAllowList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBlockList', function() {
      it('should call getBlockList successfully', function(done) {
        //uncomment below and update the code to test getBlockList
        //instance.getBlockList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHarLog', function() {
      it('should call getHarLog successfully', function(done) {
        //uncomment below and update the code to test getHarLog
        //instance.getHarLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('healthcheckGet', function() {
      it('should call healthcheckGet successfully', function(done) {
        //uncomment below and update the code to test healthcheckGet
        //instance.healthcheckGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetHarLog', function() {
      it('should call resetHarLog successfully', function(done) {
        //uncomment below and update the code to test resetHarLog
        //instance.resetHarLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setAdditionalHeaders', function() {
      it('should call setAdditionalHeaders successfully', function(done) {
        //uncomment below and update the code to test setAdditionalHeaders
        //instance.setAdditionalHeaders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setAllowList', function() {
      it('should call setAllowList successfully', function(done) {
        //uncomment below and update the code to test setAllowList
        //instance.setAllowList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setBasicAuth', function() {
      it('should call setBasicAuth successfully', function(done) {
        //uncomment below and update the code to test setBasicAuth
        //instance.setBasicAuth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setBlockList', function() {
      it('should call setBlockList successfully', function(done) {
        //uncomment below and update the code to test setBlockList
        //instance.setBlockList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setHarPage', function() {
      it('should call setHarPage successfully', function(done) {
        //uncomment below and update the code to test setHarPage
        //instance.setHarPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
