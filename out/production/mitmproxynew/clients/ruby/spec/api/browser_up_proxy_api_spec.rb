=begin
#BrowserUp Proxy

#___ This is the REST API for controlling the BrowserUp Proxy.  The BrowserUp Proxy is a swiss army knife for automated testing. It allows traffic capture in HAR files and manipulation.  It is also useful for Selenium/Cypress tests. ___ 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'spec_helper'
require 'json'

# Unit tests for BrowserupProxy::BrowserUpProxyApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BrowserUpProxyApi' do
  before do
    # run before each test
    @api_instance = BrowserupProxy::BrowserUpProxyApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BrowserUpProxyApi' do
    it 'should create an instance of BrowserUpProxyApi' do
      expect(@api_instance).to be_instance_of(BrowserupProxy::BrowserUpProxyApi)
    end
  end

  # unit tests for clear_additional_headers
  # Clear the additional Headers
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clear_additional_headers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clear_allow_list
  # Clears the AllowList, which will turn-off allowlist based filtering
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clear_allow_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clear_basic_auth_settings
  # Clears Basic Auth for a domain, disabling Automatic Basic Auth for it.
  # @param domain The domain for which to clear the basic auth settings
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clear_basic_auth_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_additional_headers
  # Get the current added Headers
  # @param [Hash] opts the optional parameters
  # @return [Headers]
  describe 'get_additional_headers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allow_list
  # Get an AllowList
  # @param [Hash] opts the optional parameters
  # @return [AllowList]
  describe 'get_allow_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_block_list
  # Get a blocklist
  # @param [Hash] opts the optional parameters
  # @return [BlockList]
  describe 'get_block_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_har_log
  # Get the current HAR.
  # @param [Hash] opts the optional parameters
  # @return [Har]
  describe 'get_har_log test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for healthcheck_get
  # Get the healthcheck
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'healthcheck_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reset_har_log
  # Starts a fresh HAR capture session.
  # @param [Hash] opts the optional parameters
  # @return [Har]
  describe 'reset_har_log test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_additional_headers
  # Set additional headers to add to requests
  # @param [Hash] opts the optional parameters
  # @return [Headers]
  describe 'set_additional_headers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_allow_list
  # Sets an AllowList
  # @param [Hash] opts the optional parameters
  # @option opts [AllowList] :allow_list 
  # @return [nil]
  describe 'set_allow_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_basic_auth
  # Enables automatic basic auth for a domain
  # @param domain The domain for which this Basic Auth should be used
  # @param [Hash] opts the optional parameters
  # @option opts [AuthBasic] :auth_basic 
  # @return [nil]
  describe 'set_basic_auth test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_block_list
  # Sets an BlockList
  # @param [Hash] opts the optional parameters
  # @option opts [BlockList] :block_list 
  # @return [nil]
  describe 'set_block_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_har_page
  # Starts a fresh HAR Page in the current active HAR
  # @param [Hash] opts the optional parameters
  # @return [Har]
  describe 'set_har_page test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
